Please implement for this domain Model:

// Cypher queries to create nodes and relationships in the graph database

CREATE (DefaultActivity:Class {name: 'DefaultActivity', file: 'src/src/org/uengine/kernel/DefaultActivity.java'})
CREATE (ExtSoundPlayActivity:Class {name: 'ExtSoundPlayActivity', file: 'src/src/org/uengine/kernel/ExtSoundPlayActivity.java'})
CREATE (SuspendActivity:Class {name: 'SuspendActivity', file: 'src/src/org/uengine/kernel/SuspendActivity.java'})
CREATE (StatusReportActivity:Class {name: 'StatusReportActivity', file: 'src/src/org/uengine/kernel/StatusReportActivity.java'})
CREATE (UrgeEMailActivity:Class {name: 'UrgeEMailActivity', file: 'src/src/org/uengine/kernel/UrgeEMailActivity.java'})
CREATE (DRoolsActivity:Class {name: 'DRoolsActivity', file: 'src/src/org/uengine/kernel/DRoolsActivity.java'})
CREATE (HTTPInvocationActivity:Class {name: 'HTTPInvocationActivity', file: 'src/src/org/uengine/kernel/HTTPInvocationActivity.java'})
CREATE (ExternalAppInvocationActivity:Class {name: 'ExternalAppInvocationActivity', file: 'src/src/org/uengine/kernel/ExternalAppInvocationActivity.java'})
CREATE (WebServiceActivity:Class {name: 'WebServiceActivity', file: 'src/src/org/uengine/kernel/WebServiceActivity.java'})
CREATE (EMailActivity:Class {name: 'EMailActivity', file: 'src/src/org/uengine/kernel/EMailActivity.java'})
CREATE (MessengerActivity:Class {name: 'MessengerActivity', file: 'src/src/org/uengine/kernel/MessengerActivity.java'})
CREATE (SubProcessActivity:Class {name: 'SubProcessActivity', file: 'src/src/org/uengine/kernel/SubProcessActivity.java'})
CREATE (FTPActivity:Class {name: 'FTPActivity', file: 'src/src/org/uengine/kernel/FTPActivity.java'})
CREATE (JMSQueueActivity:Class {name: 'JMSQueueActivity', file: 'src/src/org/uengine/kernel/JMSQueueActivity.java'})
CREATE (OpenAdaptorActivity:Class {name: 'OpenAdaptorActivity', file: 'src/src/org/uengine/kernel/OpenAdaptorActivity.java'})
CREATE (ReceiveActivity:Class {name: 'ReceiveActivity', file: 'src/src/org/uengine/kernel/ReceiveActivity.java'})
CREATE (SQLSampleActivity:Class {name: 'SQLSampleActivity', file: 'src/src/org/uengine/test/SQLSampleActivity.java'})
CREATE (HumanActivity:Class {name: 'HumanActivity', file: 'src/src/org/uengine/kernel/HumanActivity.java'})
CREATE (MetaworksActivity:Class {name: 'MetaworksActivity', file: 'src/src/org/uengine/kernel/MetaworksActivity.java'})
CREATE (WorkFlowActivity:Class {name: 'WorkFlowActivity', file: 'src/src/org/uengine/kernel/WorkFlowActivity.java'})
CREATE (FormActivity:Class {name: 'FormActivity', file: 'src/src/org/uengine/kernel/FormActivity.java'})
CREATE (ConfirmActivity:Class {name: 'ConfirmActivity', file: 'src/src/org/uengine/kernel/ConfirmActivity.java'})
CREATE (FormApprovalActivity:Class {name: 'FormApprovalActivity', file: 'src/src/org/uengine/kernel/FormApprovalActivity.java'})
CREATE (CirculationFormActivity:Class {name: 'CirculationFormActivity', file: 'src/src/org/uengine/kernel/CirculationFormActivity.java'})
CREATE (DocumentActivity:Class {name: 'DocumentActivity', file: 'src/src/org/uengine/kernel/DocumentActivity.java'})
CREATE (ExcelSheetActivity:Class {name: 'ExcelSheetActivity', file: 'src/src/org/uengine/kernel/ExcelSheetActivity.java'})
CREATE (URLActivity:Class {name: 'URLActivity', file: 'src/src/org/uengine/kernel/URLActivity.java'})
CREATE (ApprovalActivity:Class {name: 'ApprovalActivity', file: 'src/src/org/uengine/kernel/ApprovalActivity.java'})
CREATE (OfficeDocumentActivity:Class {name: 'OfficeDocumentActivity', file: 'src/src/org/uengine/kernel/OfficeDocumentActivity.java'})
CREATE (HumanApprovalActivity:Class {name: 'HumanApprovalActivity', file: 'src/src/org/uengine/kernel/HumanApprovalActivity.java'})
CREATE (TelnetNormalActivity:Class {name: 'TelnetNormalActivity', file: 'src/src/org/uengine/kernel/TelnetNormalActivity.java'})
CREATE (WaitActivity:Class {name: 'WaitActivity', file: 'src/src/org/uengine/kernel/WaitActivity.java'})
CREATE (EmptyActivity:Class {name: 'EmptyActivity', file: 'src/src/org/uengine/kernel/EmptyActivity.java'})
CREATE (LocalMessengerActivity:Class {name: 'LocalMessengerActivity', file: 'src/src/org/uengine/kernel/LocalMessengerActivity.java'})
CREATE (SMSActivity:Class {name: 'SMSActivity', file: 'src/src/org/uengine/kernel/SMSActivity.java'})
CREATE (MappingActivity:Class {name: 'MappingActivity', file: 'src/src/org/uengine/kernel/MappingActivity.java'})
CREATE (DatabaseMappingActivity:Class {name: 'DatabaseMappingActivity', file: 'src/src/org/uengine/kernel/DatabaseMappingActivity.java'})
CREATE (FileGenerateActivity:Class {name: 'FileGenerateActivity', file: 'src/src/org/uengine/kernel/FileGenerateActivity.java'})
CREATE (AssignActivity:Class {name: 'AssignActivity', file: 'src/src/org/uengine/kernel/AssignActivity.java'})
CREATE (ComplexActivity:Class {name: 'ComplexActivity', file: 'src/src/org/uengine/kernel/ComplexActivity.java'})
CREATE (RequestAndReceiveActivity:Class {name: 'RequestAndReceiveActivity', file: 'src/src/org/uengine/kernel/RequestAndReceiveActivity.java'})
CREATE (CompensatableActivity:Class {name: 'CompensatableActivity', file: 'src/src/org/uengine/kernel/CompensatableActivity.java'})
CREATE (SwitchActivity:Class {name: 'SwitchActivity', file: 'src/src/org/uengine/kernel/SwitchActivity.java'})
CREATE (AtomicHumanActivity:Class {name: 'AtomicHumanActivity', file: 'src/src/org/uengine/kernel/AtomicHumanActivity.java'})
CREATE (ApprovalLineActivity:Class {name: 'ApprovalLineActivity', file: 'src/src/org/uengine/kernel/ApprovalLineActivity.java'})
CREATE (MultipleWorkerActivity:Class {name: 'MultipleWorkerActivity', file: 'src/src/org/uengine/kernel/MultipleWorkerActivity.java'})
CREATE (AtomicActivity:Class {name: 'AtomicActivity', file: 'src/src/org/uengine/kernel/AtomicActivity.java'})
CREATE (ReceiveAndReplyActivity:Class {name: 'ReceiveAndReplyActivity', file: 'src/src/org/uengine/kernel/ReceiveAndReplyActivity.java'})
CREATE (SequenceActivity:Class {name: 'SequenceActivity', file: 'src/src/org/uengine/kernel/SequenceActivity.java'})
CREATE (LoopActivity:Class {name: 'LoopActivity', file: 'src/src/org/uengine/kernel/LoopActivity.java'})
CREATE (AllActivity:Class {name: 'AllActivity', file: 'src/src/org/uengine/kernel/AllActivity.java'})
CREATE (ScopeActivity:Class {name: 'ScopeActivity', file: 'src/src/org/uengine/kernel/ScopeActivity.java'})
CREATE (ProcessDefinition:Class {name: 'ProcessDefinition', file: 'src/src/org/uengine/kernel/ProcessDefinition.java'})
CREATE (HumanTestProcess:Class {name: 'HumanTestProcess', file: 'src/src/org/uengine/kernel/HumanActivityTest.java'})
CREATE (HumanApprovalLineActivity:Class {name: 'HumanApprovalLineActivity', file: 'src/src/org/uengine/kernel/HumanApprovalLineActivity.java'})
CREATE (FormApprovalLineActivity:Class {name: 'FormApprovalLineActivity', file: 'src/src/org/uengine/kernel/FormApprovalLineActivity.java'})
CREATE (ReferenceBlockActivity:Class {name: 'ReferenceBlockActivity', file: 'src/src/org/uengine/kernel/ReferenceBlockActivity.java'})
CREATE (TryCatchActivity:Class {name: 'TryCatchActivity', file: 'src/src/org/uengine/kernel/TryCatchActivity.java'})
CREATE (FlagActivity:Class {name: 'FlagActivity', file: 'src/src/org/uengine/kernel/FlagActivity.java'})
CREATE (SoundPlayActivity:Class {name: 'SoundPlayActivity', file: 'src/src/org/uengine/kernel/SoundPlayActivity.java'})
CREATE (RoleAssignActivity:Class {name: 'RoleAssignActivity', file: 'src/src/org/uengine/kernel/RoleAssignActivity.java'})
CREATE (DiscoverActivity:Class {name: 'DiscoverActivity', file: 'src/src/org/uengine/kernel/DiscoverActivity.java'})
CREATE (SQLActivity:Class {name: 'SQLActivity', file: 'src/src/org/uengine/kernel/SQLActivity.java'})
CREATE (WebServiceActivity2:Class {name: 'WebServiceActivity2', file: 'src/src/org/uengine/kernel/WebServiceActivity2.java'})
CREATE (NamedParameterSQLActivity:Class {name: 'NamedParameterSQLActivity', file: 'src/src/org/uengine/kernel/NamedParameterSQLActivity.java'})
CREATE (EndActivity:Class {name: 'EndActivity', file: 'src/src/org/uengine/kernel/EndActivity.java'})
CREATE (LocalNateOnMessengerActivity:Class {name: 'LocalNateOnMessengerActivity', file: 'src/src/org/uengine/kernel/LocalNateOnMessengerActivity.java'})
CREATE (LocalEMailActivity:Class {name: 'LocalEMailActivity', file: 'src/src/org/uengine/kernel/LocalEMailActivity.java'})
CREATE (ApprovalSubActivity:Class {name: 'ApprovalSubActivity', file: 'src/src/org/uengine/kernel/ApprovalSubActivity.java'})
CREATE (BackActivity:Class {name: 'BackActivity', file: 'src/src/org/uengine/kernel/BackActivity.java'})
CREATE (FileGenerationActivity:Class {name: 'FileGenerationActivity', file: 'src/src/org/uengine/kernel/FileGenerationActivity.java'})
CREATE (BreakActivity:Class {name: 'BreakActivity', file: 'src/src/org/uengine/kernel/BreakActivity.java'})
CREATE (LocalSMSActivity:Class {name: 'LocalSMSActivity', file: 'src/src/org/uengine/kernel/LocalSMSActivity.java'})
CREATE (ScriptActivity:Class {name: 'ScriptActivity', file: 'src/src/org/uengine/kernel/ScriptActivity.java'})
CREATE (Activity:Class {name: 'Activity', file: 'src/src/org/uengine/kernel/Activity.java'})
CREATE (ReceiveActivity)-[:INHERITS_FROM]->(SQLSampleActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(ExtSoundPlayActivity)
CREATE (ComplexActivity)-[:INHERITS_FROM]->(RequestAndReceiveActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(SuspendActivity)
CREATE (HumanActivity)-[:INHERITS_FROM]->(MetaworksActivity)
CREATE (WebServiceActivity)-[:INHERITS_FROM]->(EMailActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(StatusReportActivity)
CREATE (ScopeActivity)-[:INHERITS_FROM]->(ProcessDefinition)
CREATE (ComplexActivity)-[:INHERITS_FROM]->(CompensatableActivity)
CREATE (EMailActivity)-[:INHERITS_FROM]->(MessengerActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(UrgeEMailActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(DRoolsActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(HTTPInvocationActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(ExternalAppInvocationActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(WebServiceActivity)
CREATE (HumanActivity)-[:INHERITS_FROM]->(WorkFlowActivity)
CREATE (FormActivity)-[:INHERITS_FROM]->(ConfirmActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(SubProcessActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(FTPActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(JMSQueueActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(OpenAdaptorActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(ReceiveActivity)
CREATE (ComplexActivity)-[:INHERITS_FROM]->(SwitchActivity)
CREATE (FormActivity)-[:INHERITS_FROM]->(FormApprovalActivity)
CREATE (ScopeActivity)-[:INHERITS_FROM]->(HumanApprovalLineActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(EmptyActivity)
CREATE (ReceiveActivity)-[:INHERITS_FROM]->(HumanActivity)
CREATE (ComplexActivity)-[:INHERITS_FROM]->(AtomicHumanActivity)
CREATE (HumanActivity)-[:INHERITS_FROM]->(FormActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(LocalMessengerActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(MappingActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(FileGenerateActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(AssignActivity)
CREATE (ComplexActivity)-[:INHERITS_FROM]->(ApprovalLineActivity)
CREATE (HumanActivity)-[:INHERITS_FROM]->(DocumentActivity)
CREATE (ComplexActivity)-[:INHERITS_FROM]->(MultipleWorkerActivity)
CREATE (ReceiveActivity)-[:INHERITS_FROM]->(WaitActivity)
CREATE (ComplexActivity)-[:INHERITS_FROM]->(AtomicActivity)
CREATE (Activity)-[:INHERITS_FROM]->(DefaultActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(ComplexActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(FlagActivity)
CREATE (URLActivity)-[:INHERITS_FROM]->(ApprovalActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(SoundPlayActivity)
CREATE (ComplexActivity)-[:INHERITS_FROM]->(ReceiveAndReplyActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(RoleAssignActivity)
CREATE (DocumentActivity)-[:INHERITS_FROM]->(ExcelSheetActivity)
CREATE (HumanActivity)-[:INHERITS_FROM]->(URLActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(DiscoverActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(SQLActivity)
CREATE (MappingActivity)-[:INHERITS_FROM]->(DatabaseMappingActivity)
CREATE (ComplexActivity)-[:INHERITS_FROM]->(SequenceActivity)
CREATE (HumanActivity)-[:INHERITS_FROM]->(OfficeDocumentActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(WebServiceActivity2)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(NamedParameterSQLActivity)
CREATE (ScopeActivity)-[:INHERITS_FROM]->(FormApprovalLineActivity)
CREATE (ComplexActivity)-[:INHERITS_FROM]->(LoopActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(EndActivity)
CREATE (ComplexActivity)-[:INHERITS_FROM]->(AllActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(LocalNateOnMessengerActivity)
CREATE (ComplexActivity)-[:INHERITS_FROM]->(ScopeActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(LocalEMailActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(ApprovalSubActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(BackActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(FileGenerationActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(BreakActivity)
CREATE (FormActivity)-[:INHERITS_FROM]->(CirculationFormActivity)
CREATE (ComplexActivity)-[:INHERITS_FROM]->(ReferenceBlockActivity)
CREATE (ProcessDefinition)-[:INHERITS_FROM]->(HumanTestProcess)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(LocalSMSActivity)
CREATE (DefaultActivity)-[:INHERITS_FROM]->(ScriptActivity)
CREATE (LocalMessengerActivity)-[:INHERITS_FROM]->(SMSActivity)
CREATE (HumanActivity)-[:INHERITS_FROM]->(HumanApprovalActivity)
CREATE (HumanActivity)-[:INHERITS_FROM]->(TelnetNormalActivity)
CREATE (ComplexActivity)-[:INHERITS_FROM]->(TryCatchActivity)
SET DefaultActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET DefaultActivity.`getInitialContext` = 'public InitialContext getInitialContext()'
SET ExtSoundPlayActivity.`enableIf` = 'public boolean enableIf(Object dependencyFieldValue)'
SET ExtSoundPlayActivity.`enableIf` = 'public boolean enableIf(Object dependencyFieldValue)'
SET ExtSoundPlayActivity.`getMode` = 'public String getMode()'
SET ExtSoundPlayActivity.`setMode` = 'public void setMode(String mode)'
SET ExtSoundPlayActivity.`getSoundUrl` = 'public SoundUrlContext getSoundUrl()'
SET ExtSoundPlayActivity.`setSoundUrl` = 'public void setSoundUrl(SoundUrlContext soundUrl)'
SET ExtSoundPlayActivity.`getSoundFile` = 'public FileContext getSoundFile()'
SET ExtSoundPlayActivity.`setSoundFile` = 'public void setSoundFile(FileContext soundFile)'
SET ExtSoundPlayActivity.`play` = 'public void play(ProcessInstance instance)'
SET ExtSoundPlayActivity.`executeActivity` = 'public void executeActivity(ProcessInstance instance)'
SET ExtSoundPlayActivity.`validate` = 'public ValidationContext validate(Map options)'
SET SuspendActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET SuspendActivity.`resume` = 'public void resume(ProcessInstance instance)'
SET StatusReportActivity.`getContent` = 'public String getContent()'
SET StatusReportActivity.`setContent` = 'public void setContent(String string)'
SET StatusReportActivity.`getFieldName` = 'public String getFieldName()'
SET StatusReportActivity.`setFieldName` = 'public void setFieldName(String fieldName)'
SET StatusReportActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET UrgeEMailActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET DRoolsActivity.`getDefinitionId` = 'public String getDefinitionId()'
SET DRoolsActivity.`setDefinitionId` = 'public void setDefinitionId(String l)'
SET DRoolsActivity.`setVariableBindings` = 'public void setVariableBindings(ParameterContext[] contexts)'
SET DRoolsActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET DRoolsActivity.`logic` = 'public void logic(Object target)'
SET DRoolsActivity.`getDefinitionVersionId` = 'public String getDefinitionVersionId(ProcessInstance instance)'
SET DRoolsActivity.`readRule` = 'private RuleBase readRule(ProcessInstance instance)'
SET HTTPInvocationActivity.`getHost` = 'public String getHost()'
SET HTTPInvocationActivity.`setHost` = 'public void setHost(String host)'
SET HTTPInvocationActivity.`getPort` = 'public int getPort()'
SET HTTPInvocationActivity.`setPort` = 'public void setPort(int port)'
SET HTTPInvocationActivity.`getProtocol` = 'public String getProtocol()'
SET HTTPInvocationActivity.`setProtocol` = 'public void setProtocol(String protocol)'
SET HTTPInvocationActivity.`getTargetURL` = 'public String getTargetURL()'
SET HTTPInvocationActivity.`setTargetURL` = 'public void setTargetURL(String targetURL)'
SET HTTPInvocationActivity.`getUri` = 'public String getUri()'
SET HTTPInvocationActivity.`setUri` = 'public void setUri(String uri)'
SET HTTPInvocationActivity.`getInvocationType` = 'public int getInvocationType()'
SET HTTPInvocationActivity.`setInvocationType` = 'public void setInvocationType(int invocationType)'
SET HTTPInvocationActivity.`setParameters` = 'public void setParameters(ParameterContext[] parameters)'
SET HTTPInvocationActivity.`getPayload` = 'public String getPayload()'
SET HTTPInvocationActivity.`setPayload` = 'public void setPayload(String payload)'
SET HTTPInvocationActivity.`getResultPV` = 'public ProcessVariable getResultPV()'
SET HTTPInvocationActivity.`setResultPV` = 'public void setResultPV(ProcessVariable resultPV)'
SET HTTPInvocationActivity.`executeActivity` = 'public void executeActivity(ProcessInstance instance)'
SET ExternalAppInvocationActivity.`getApplicationPath` = 'public String getApplicationPath()'
SET ExternalAppInvocationActivity.`setApplicationPath` = 'public void setApplicationPath(String applicationPath)'
SET ExternalAppInvocationActivity.`setArguments` = 'public void setArguments(ParameterContext[] arguments)'
SET ExternalAppInvocationActivity.`getVariableOut` = 'public ProcessVariable getVariableOut()'
SET ExternalAppInvocationActivity.`setVariableOut` = 'public void setVariableOut(ProcessVariable variableOut)'
SET ExternalAppInvocationActivity.`getDefaultDirectory` = 'public String getDefaultDirectory()'
SET ExternalAppInvocationActivity.`setDefaultDirectory` = 'public void setDefaultDirectory(String defaultDirectory)'
SET ExternalAppInvocationActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET ExternalAppInvocationActivity.`write` = 'public void write(String out)'
SET ExternalAppInvocationActivity.`completed` = 'public void completed()'
SET ExternalAppInvocationActivity.`validate` = 'public ValidationContext validate(Map options)'
SET ExternalAppInvocationActivity.`setBeanProperty` = 'public void setBeanProperty(String key, Object value)'
SET ExternalAppInvocationActivity.`getBeanProperty` = 'public Object getBeanProperty(String key)'
SET WebServiceActivity.`getService` = 'public ServiceDefinition getService()'
SET WebServiceActivity.`setService` = 'public void setService(ServiceDefinition service)'
SET WebServiceActivity.`getPortType` = 'public String getPortType()'
SET WebServiceActivity.`setPortType` = 'public void setPortType(String value)'
SET WebServiceActivity.`getOperationName` = 'public String getOperationName()'
SET WebServiceActivity.`setOperationName` = 'public void setOperationName(String value)'
SET WebServiceActivity.`setParameters` = 'public void setParameters(Object[] value)'
SET WebServiceActivity.`getRole` = 'public Role getRole()'
SET WebServiceActivity.`setRole` = 'public void setRole(Role value)'
SET WebServiceActivity.`getOutput` = 'public ProcessVariable getOutput()'
SET WebServiceActivity.`setOutput` = 'public void setOutput(ProcessVariable value)'
SET WebServiceActivity.`getStublessInvocation` = 'public boolean getStublessInvocation()'
SET WebServiceActivity.`setStublessInvocation` = 'public void setStublessInvocation(boolean stublessInvocation)'
SET WebServiceActivity.`executeActivity` = 'public void executeActivity(ProcessInstance instance)'
SET WebServiceActivity.`getActivityDetails` = 'public Map getActivityDetails(ProcessInstance instance, String locale)'
SET WebServiceActivity.`validate` = 'public ValidationContext validate(Map options)'
SET WebServiceActivity.`getPortType` = 'public PortType getPortType(Definition wsdlDef)'
SET WebServiceActivity.`getOperation` = 'public Operation getOperation(Definition wsdlDef)'
SET EMailActivity.`getContents` = 'public String getContents()'
SET EMailActivity.`setContents` = 'public void setContents(String value)'
SET EMailActivity.`getTitle` = 'public String getTitle()'
SET EMailActivity.`setTitle` = 'public void setTitle(String value)'
SET EMailActivity.`getToRole` = 'public Role getToRole()'
SET EMailActivity.`setToRole` = 'public void setToRole(Role value)'
SET EMailActivity.`executeActivity` = 'public void executeActivity(ProcessInstance instance)'
SET EMailActivity.`invokeWebService` = 'protected void invokeWebService(ProcessInstance instance)'
SET EMailActivity.`getActivityDetails` = 'public Map getActivityDetails(ProcessInstance inst, String locale)'
SET MessengerActivity.`executeActivity` = 'public void executeActivity(final ProcessInstance instance)'
SET SubProcessActivity.`getInstanceId` = 'public String getInstanceId()'
SET SubProcessActivity.`setInstanceId` = 'public void setInstanceId(String string)'
SET SubProcessActivity.`getDefinitionId` = 'public String getDefinitionId()'
SET SubProcessActivity.`setDefinitionId` = 'public void setDefinitionId(String l)'
SET SubProcessActivity.`getDefinitionObject` = 'public ProcessDefinition getDefinitionObject()'
SET SubProcessActivity.`setDefinitionObject` = 'public void setDefinitionObject(ProcessDefinition definition)'
SET SubProcessActivity.`getDynamicDefinitionId` = 'public String getDynamicDefinitionId()'
SET SubProcessActivity.`setDynamicDefinitionId` = 'public void setDynamicDefinitionId(String dynamicDefinitionId)'
SET SubProcessActivity.`getDynamicDefinitionIdPV` = 'public ProcessVariable getDynamicDefinitionIdPV()'
SET SubProcessActivity.`setDynamicDefinitionIdPV` = 'public void setDynamicDefinitionIdPV(ProcessVariable dynamicDefinitionIdPV)'
SET SubProcessActivity.`getVersionSelectOption` = 'public int getVersionSelectOption()'
SET SubProcessActivity.`setVersionSelectOption` = 'public void setVersionSelectOption(int versionSelectOption)'
SET SubProcessActivity.`setVariableBindings` = 'public void setVariableBindings(ParameterContext[] contexts)'
SET SubProcessActivity.`setRoleBindings` = 'public void setRoleBindings(RoleParameterContext[] contexts)'
SET SubProcessActivity.`isRunAndForget` = 'public boolean isRunAndForget()'
SET SubProcessActivity.`setRunAndForget` = 'public void setRunAndForget(boolean b)'
SET SubProcessActivity.`isCreateAsRootProcess` = 'public boolean isCreateAsRootProcess()'
SET SubProcessActivity.`setCreateAsRootProcess` = 'public void setCreateAsRootProcess(boolean createAsRootProcess)'
SET SubProcessActivity.`getMultipleInstanceLabel` = 'public TextContext getMultipleInstanceLabel()'
SET SubProcessActivity.`setMultipleInstanceLabel` = 'public void setMultipleInstanceLabel(TextContext multipleInstanceLabel)'
SET SubProcessActivity.`getForEachRole` = 'public Role getForEachRole()'
SET SubProcessActivity.`setForEachRole` = 'public void setForEachRole(Role role)'
SET SubProcessActivity.`getForEachVariable` = 'public ProcessVariable getForEachVariable()'
SET SubProcessActivity.`setForEachVariable` = 'public void setForEachVariable(ProcessVariable forEachVariable)'
SET SubProcessActivity.`isViewAlsoInMainProcess` = 'public boolean isViewAlsoInMainProcess()'
SET SubProcessActivity.`setViewAlsoInMainProcess` = 'public void setViewAlsoInMainProcess(boolean viewAlsoInMainProcess)'
SET SubProcessActivity.`getUnInitiatedRoleMappings` = 'private Hashtable getUnInitiatedRoleMappings(ProcessInstance instance)'
SET SubProcessActivity.`getDeletedRoleMappings` = 'private Hashtable getDeletedRoleMappings(ProcessInstance instance)'
SET SubProcessActivity.`stopSubProcessInstance` = 'private void stopSubProcessInstance(ProcessInstance instance,Hashtable deletedRoleMappings)'
SET SubProcessActivity.`refreshMultipleInstance` = 'public void refreshMultipleInstance(ProcessInstance instance)'
SET SubProcessActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET SubProcessActivity.`onSubProcessReturn` = 'public void onSubProcessReturn(ProcessInstance instance, ProcessInstance subProcessInstance, boolean skipped)'
SET SubProcessActivity.`applyVariableBindings` = 'protected void applyVariableBindings(ProcessInstance instance, Vector spIds, Map subProcesses, Map options)'
SET SubProcessActivity.`afterComplete` = 'protected void afterComplete(ProcessInstance instance)'
SET SubProcessActivity.`applyRoleBindings` = 'protected void applyRoleBindings(ProcessInstance instance, Vector spIds, Map subProcesses, Map options)'
SET SubProcessActivity.`getSubProcesses` = 'public Vector getSubProcesses(ProcessInstance instance)'
SET SubProcessActivity.`getDefinitionVersionId` = 'public String getDefinitionVersionId(ProcessInstance instance)'
SET SubProcessActivity.`getDefinitionVersionId` = 'public String getDefinitionVersionId(String realDefinitionId, ProcessInstance instance)'
SET SubProcessActivity.`initiateSubProcess` = 'protected ProcessInstance initiateSubProcess(String realDefinitionId, ProcessInstance instance, RoleMapping currentRoleMapping, Serializable currentVariableValue, boolean isConnectedMultipleSubProcesses, int mappingIndex)'
SET SubProcessActivity.`transferValues` = 'protected void transferValues(ProcessInstance instance, ProcessInstance subProcessInstance, RoleMapping currentRoleMapping, Serializable currentVariableValue, int mappingIndex)'
SET SubProcessActivity.`getActivityDetails` = 'public Map getActivityDetails(ProcessInstance inst, String locale)'
SET SubProcessActivity.`validate` = 'public ValidationContext validate(Map options)'
SET SubProcessActivity.`setSubprocessIds` = 'protected void setSubprocessIds(ProcessInstance instance, Vector<String> spIds, String space)'
SET SubProcessActivity.`reset` = 'public void reset(ProcessInstance instance)'
SET SubProcessActivity.`skip` = 'public void skip(ProcessInstance instance)'
SET SubProcessActivity.`stop` = 'public void stop(ProcessInstance instance)'
SET SubProcessActivity.`compensate` = 'public void compensate(ProcessInstance instance)'
SET SubProcessActivity.`getDefinitionIdOnly` = 'public String getDefinitionIdOnly()'
SET SubProcessActivity.`onEvent` = 'protected void onEvent(String command, ProcessInstance instance, Object payload)'
SET SubProcessActivity.`attachSubProcess` = 'public void attachSubProcess(ProcessInstance instance, String subProcessInstanceId, String label)'
SET SubProcessActivity.`onMessage` = 'public boolean onMessage(ProcessInstance instance, Object payload)'
SET SubProcessActivity.`getMessage` = 'public String getMessage()'
SET SubProcessActivity.`getTracingTag` = 'public String getTracingTag()'
SET FTPActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET FTPActivity.`getAccount` = 'public String getAccount()'
SET FTPActivity.`getAddress` = 'public String getAddress()'
SET FTPActivity.`getDirectory` = 'public String getDirectory()'
SET FTPActivity.`getFileName` = 'public String getFileName()'
SET FTPActivity.`getPassword` = 'public String getPassword()'
SET FTPActivity.`getSourceURL` = 'public String getSourceURL()'
SET FTPActivity.`setAccount` = 'public void setAccount(String string)'
SET FTPActivity.`setAddress` = 'public void setAddress(String string)'
SET FTPActivity.`setDirectory` = 'public void setDirectory(String string)'
SET FTPActivity.`setFileName` = 'public void setFileName(String string)'
SET FTPActivity.`setPassword` = 'public void setPassword(String string)'
SET FTPActivity.`setSourceURL` = 'public void setSourceURL(String string)'
SET JMSQueueActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET JMSQueueActivity.`isJmsRedelivered` = 'public boolean isJmsRedelivered()'
SET JMSQueueActivity.`setJmsRedelivered` = 'public void setJmsRedelivered(boolean jmsRedelivered)'
SET JMSQueueActivity.`getMessageFormat` = 'public String getMessageFormat()'
SET JMSQueueActivity.`setMessageFormat` = 'public void setMessageFormat(String messageFormat)'
SET JMSQueueActivity.`getQueueConnectionFactoryJNDIName` = 'public String getQueueConnectionFactoryJNDIName()'
SET JMSQueueActivity.`getResultQueueJNDIName` = 'public String getResultQueueJNDIName()'
SET JMSQueueActivity.`setResultQueueJNDIName` = 'public void setResultQueueJNDIName(String resultQueueJNDIName)'
SET JMSQueueActivity.`getAcknowledgeType` = 'public int getAcknowledgeType()'
SET JMSQueueActivity.`setAcknowledgeType` = 'public void setAcknowledgeType(int acknowledgeType)'
SET JMSQueueActivity.`isIssueNewTransaction` = 'public boolean isIssueNewTransaction()'
SET JMSQueueActivity.`setIssueNewTransaction` = 'public void setIssueNewTransaction(boolean issueNewTransaction)'
SET JMSQueueActivity.`getJmsProvider` = 'public String getJmsProvider()'
SET JMSQueueActivity.`setJmsProvider` = 'public void setJmsProvider(String jmsProvider)'
SET JMSQueueActivity.`setMessageValues` = 'public void setMessageValues(ParameterContext[] messageValues)'
SET JMSQueueActivity.`setPropertyValues` = 'public void setPropertyValues(ParameterContext[] propertyValues)'
SET OpenAdaptorActivity.`createDesigner` = 'public ActivityDesigner createDesigner()'
SET OpenAdaptorActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET ReceiveActivity.`getMessage` = 'public String getMessage()'
SET ReceiveActivity.`setMessage` = 'public void setMessage(String value)'
SET ReceiveActivity.`getOutput` = 'public ProcessVariable getOutput()'
SET ReceiveActivity.`setOutput` = 'public void setOutput(ProcessVariable value)'
SET ReceiveActivity.`getMessageDefinition` = 'public MessageDefinition getMessageDefinition()'
SET ReceiveActivity.`setMessageDefinition` = 'public void setMessageDefinition(MessageDefinition definition)'
SET ReceiveActivity.`setParameters` = 'public void setParameters(ParameterContext[] contexts)'
SET ReceiveActivity.`getFromRole` = 'public Role getFromRole()'
SET ReceiveActivity.`setFromRole` = 'public void setFromRole(Role role)'
SET ReceiveActivity.`afterPreviousActivityExecute` = 'protected void afterPreviousActivityExecute(ActivityInstance instance)'
SET ReceiveActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET ReceiveActivity.`onEvent` = 'protected void onEvent(String command, ProcessInstance instance, Object payload)'
SET ReceiveActivity.`isMyMessage` = 'protected boolean isMyMessage(String message, ProcessInstance instance, Object payload)'
SET ReceiveActivity.`onReceive` = 'protected void onReceive(ProcessInstance instance, Object payload)'
SET ReceiveActivity.`savePayload` = 'public void savePayload(ProcessInstance instance, ResultPayload resultPayload)'
SET ReceiveActivity.`testMyMessage` = 'protected boolean testMyMessage(ProcessInstance instance, Vector payloads)'
SET ReceiveActivity.`validate` = 'public ValidationContext validate(Map options)'
SET ReceiveActivity.`fireReceived` = 'public void fireReceived(ProcessInstance instance, Object payload)'
SET ReceiveActivity.`onMessage` = 'public boolean onMessage(ProcessInstance instance, Object payload)'
SET SQLSampleActivity.`getSqlStmt` = 'public TextContext getSqlStmt()'
SET SQLSampleActivity.`setSqlStmt` = 'public void setSqlStmt(TextContext value)'
SET SQLSampleActivity.`getConnectionString` = 'public String getConnectionString()'
SET SQLSampleActivity.`setConnectionString` = 'public void setConnectionString(String value)'
SET SQLSampleActivity.`getUserId` = 'public String getUserId()'
SET SQLSampleActivity.`setUserId` = 'public void setUserId(String value)'
SET SQLSampleActivity.`getPassword` = 'public String getPassword()'
SET SQLSampleActivity.`setPassword` = 'public void setPassword(String value)'
SET SQLSampleActivity.`getDriverClass` = 'public String getDriverClass()'
SET SQLSampleActivity.`setDriverClass` = 'public void setDriverClass(String value)'
SET SQLSampleActivity.`createInstance` = 'public ProcessInstance createInstance(ProcessInstance instanceInCreating)'
SET SQLSampleActivity.`executeActivity` = 'public void executeActivity(ProcessInstance instance)'
SET SQLSampleActivity.`getActivityDetails` = 'public Map getActivityDetails(ProcessInstance inst, String locale)'
SET HumanActivity.`getRole` = 'public Role getRole()'
SET HumanActivity.`setRole` = 'public void setRole(Role value)'
SET HumanActivity.`getReferenceRole` = 'public Role getReferenceRole()'
SET HumanActivity.`setReferenceRole` = 'public void setReferenceRole(Role referenceRole)'
SET HumanActivity.`getTool` = 'public String getTool()'
SET HumanActivity.`setTool` = 'public void setTool(String value)'
SET HumanActivity.`isSendEmailWorkitem` = 'public boolean isSendEmailWorkitem()'
SET HumanActivity.`setSendEmailWorkitem` = 'public void setSendEmailWorkitem(boolean isSendEmailWorkitem)'
SET HumanActivity.`isNotificationWorkitem` = 'public boolean isNotificationWorkitem()'
SET HumanActivity.`setNotificationWorkitem` = 'public void setNotificationWorkitem(boolean isNotificationWorkitem)'
SET HumanActivity.`isAllowAnonymous` = 'public boolean isAllowAnonymous()'
SET HumanActivity.`setAllowAnonymous` = 'public void setAllowAnonymous(boolean isAllowAnonymous)'
SET HumanActivity.`getDuration` = 'public int getDuration()'
SET HumanActivity.`getDuration` = 'public int getDuration(ProcessInstance instance)'
SET HumanActivity.`setDuration` = 'public void setDuration(int i)'
SET HumanActivity.`setDuration` = 'public void setDuration(ProcessInstance instance, int duration)'
SET HumanActivity.`getDueDate` = 'public Calendar getDueDate(ProcessInstance instance)'
SET HumanActivity.`setDueDate` = 'public void setDueDate(ProcessInstance instance, Calendar dueDate, boolean updateWorkList)'
SET HumanActivity.`setDueDate` = 'public void setDueDate(ProcessInstance instance, Calendar dueDate, boolean updateWorkList, boolean refreshDuration)'
SET HumanActivity.`setDueDate` = 'public void setDueDate(ProcessInstance instance, Calendar dueDate)'
SET HumanActivity.`setCompletedRoleMapping` = 'private void setCompletedRoleMapping(ProcessInstance instance, RoleMapping completedRoleMapping)'
SET HumanActivity.`getCompletedRoleMapping` = 'private RoleMapping getCompletedRoleMapping(ProcessInstance instance)'
SET HumanActivity.`getCo2Emission` = 'public int getCo2Emission()'
SET HumanActivity.`setCo2Emission` = 'public void setCo2Emission(int co2Emission)'
SET HumanActivity.`getWorkload` = 'public int getWorkload()'
SET HumanActivity.`setWorkload` = 'public void setWorkload(int i)'
SET HumanActivity.`getPriority` = 'public int getPriority()'
SET HumanActivity.`setPriority` = 'public void setPriority(int i)'
SET HumanActivity.`getInput` = 'public ProcessVariable getInput()'
SET HumanActivity.`setInput` = 'public void setInput(ProcessVariable value)'
SET HumanActivity.`getExtValue1` = 'public String getExtValue1()'
SET HumanActivity.`setExtValue1` = 'public void setExtValue1(String extValue1)'
SET HumanActivity.`getExtValue2` = 'public String getExtValue2()'
SET HumanActivity.`setExtValue2` = 'public void setExtValue2(String extValue2)'
SET HumanActivity.`getExtValue3` = 'public String getExtValue3()'
SET HumanActivity.`setExtValue3` = 'public void setExtValue3(String extValue3)'
SET HumanActivity.`getExtValue4` = 'public String getExtValue4()'
SET HumanActivity.`setExtValue4` = 'public void setExtValue4(String extValue4)'
SET HumanActivity.`getExtValue5` = 'public String getExtValue5()'
SET HumanActivity.`setExtValue5` = 'public void setExtValue5(String extValue5)'
SET HumanActivity.`getExtValue6` = 'public String getExtValue6()'
SET HumanActivity.`setExtValue6` = 'public void setExtValue6(String extValue6)'
SET HumanActivity.`getExtValue7` = 'public String getExtValue7()'
SET HumanActivity.`setExtValue7` = 'public void setExtValue7(String extValue7)'
SET HumanActivity.`getExtValue8` = 'public String getExtValue8()'
SET HumanActivity.`setExtValue8` = 'public void setExtValue8(String extValue8)'
SET HumanActivity.`getExtValue9` = 'public String getExtValue9()'
SET HumanActivity.`setExtValue9` = 'public void setExtValue9(String extValue9)'
SET HumanActivity.`getExtValue10` = 'public String getExtValue10()'
SET HumanActivity.`setExtValue10` = 'public void setExtValue10(String extValue10)'
SET HumanActivity.`getWIHSysAddress` = 'protected String getWIHSysAddress()'
SET HumanActivity.`getInstruction` = 'public TextContext getInstruction()'
SET HumanActivity.`setInstruction` = 'public void setInstruction(TextContext string)'
SET HumanActivity.`getKeyword` = 'public TextContext getKeyword()'
SET HumanActivity.`setKeyword` = 'public void setKeyword(TextContext string)'
SET HumanActivity.`setOpenTime` = 'public void setOpenTime(ProcessInstance instance, Calendar theTime)'
SET HumanActivity.`getOpenTime` = 'public Calendar getOpenTime(ProcessInstance instance)'
SET HumanActivity.`createParameter` = 'public Map createParameter(final ProcessInstance instance)'
SET HumanActivity.`put` = 'public Object put(Object key, Object val)'
SET HumanActivity.`getActualMapping` = 'protected RoleMapping getActualMapping(ProcessInstance instance)'
SET HumanActivity.`getActualMapping` = 'public RoleMapping getActualMapping(ProcessInstance instance)'
SET HumanActivity.`setCompletedHumanActivityInTransaction` = 'protected void setCompletedHumanActivityInTransaction(ProcessInstance instance)'
SET HumanActivity.`getCompletedHumanActivityInTransaction` = 'public HumanActivity getCompletedHumanActivityInTransaction(ProcessInstance instance)'
SET HumanActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET HumanActivity.`addWorkitem` = 'protected void addWorkitem(ProcessInstance instance, String defaultStatus)'
SET HumanActivity.`onComplete` = 'public boolean onComplete(ProcessInstance instance, Object payload)'
SET HumanActivity.`onReceive` = 'protected void onReceive(ProcessInstance instance, Object payload)'
SET HumanActivity.`setTracingTag` = 'public void setTracingTag(String tag)'
SET HumanActivity.`getStatus` = 'public String getStatus(ProcessInstance instance)'
SET HumanActivity.`getExtraMessage` = 'protected String getExtraMessage(ProcessInstance instance)'
SET HumanActivity.`getActivityDetails` = 'public Map getActivityDetails(ProcessInstance inst, String locale)'
SET HumanActivity.`afterComplete` = 'protected void afterComplete(ProcessInstance instance)'
SET HumanActivity.`beforeExecute` = 'protected void beforeExecute(ProcessInstance instance)'
SET HumanActivity.`validate` = 'public ValidationContext validate(Map options)'
SET HumanActivity.`compensate` = 'public void compensate(ProcessInstance instance)'
SET HumanActivity.`skip` = 'public void skip(ProcessInstance instance)'
SET HumanActivity.`suspend` = 'public void suspend(ProcessInstance instance)'
SET HumanActivity.`reset` = 'public void reset(ProcessInstance instance)'
SET HumanActivity.`cancelWorkItem` = 'protected void cancelWorkItem(ProcessInstance instance)'
SET HumanActivity.`cancelWorkItem` = 'protected void cancelWorkItem(ProcessInstance instance, String status)'
SET HumanActivity.`setTaskIds` = 'protected void setTaskIds(ProcessInstance instance, String[] taskIds)'
SET HumanActivity.`getTaskStatusMap` = 'protected Map getTaskStatusMap(ProcessInstance instance)'
SET HumanActivity.`setTaskStatusMap` = 'protected void setTaskStatusMap(ProcessInstance instance, Map map)'
SET HumanActivity.`getParameterMap` = 'public Map getParameterMap()'
SET HumanActivity.`setStartedTime` = 'public void setStartedTime(ProcessInstance instance, Calendar theTime)'
SET HumanActivity.`refreshDuration` = 'protected void refreshDuration(ProcessInstance instance)'
SET HumanActivity.`stop` = 'public void stop(ProcessInstance instance)'
SET HumanActivity.`stop` = 'public void stop(ProcessInstance instance, String status)'
SET HumanActivity.`delegate` = 'public void delegate(ProcessInstance instance, RoleMapping roleMapping)'
SET HumanActivity.`delegate` = 'public void delegate(ProcessInstance instance, RoleMapping roleMapping, boolean delegateOnlyForWorkitem)'
SET HumanActivity.`saveWorkItem` = 'public void saveWorkItem(ProcessInstance instance, ResultPayload payload)'
SET HumanActivity.`getPreviousHumanActivity` = 'public HumanActivity getPreviousHumanActivity(ProcessInstance instance)'
SET HumanActivity.`logic` = 'public void logic(Activity activity)'
SET HumanActivity.`afterExecute` = 'public void afterExecute(ProcessInstance instance)'
SET HumanActivity.`saveSnapshotHTML` = 'protected void saveSnapshotHTML(ProcessInstance instance)'
SET HumanActivity.`getWriter` = 'public PrintWriter getWriter()'
SET MetaworksActivity.`getTool` = 'public String getTool()'
SET MetaworksActivity.`setTool` = 'public void setTool(String toolName)'
SET MetaworksActivity.`getApplicationName` = 'public String getApplicationName()'
SET MetaworksActivity.`setApplicationName` = 'public void setApplicationName(String string)'
SET WorkFlowActivity.`validate` = 'public ValidationContext validate(Map options)'
SET FormActivity.`setMappingContext` = 'public void setMappingContext(MappingContext mappingContext)'
SET FormActivity.`getVariableForHtmlFormContext` = 'public ProcessVariable getVariableForHtmlFormContext()'
SET FormActivity.`isMappingWhenSave` = 'public boolean isMappingWhenSave()'
SET FormActivity.`setMappingWhenSave` = 'public void setMappingWhenSave(boolean mappingWhenSave)'
SET FormActivity.`getDefinitionVersionId` = 'public String getDefinitionVersionId(ProcessInstance instance)'
SET FormActivity.`readForm` = 'private String readForm(ProcessInstance instance)'
SET FormActivity.`afterComplete` = 'protected void afterComplete(ProcessInstance instance)'
SET FormActivity.`mappingOut` = 'protected void mappingOut(ProcessInstance instance)'
SET FormActivity.`saveWorkItem` = 'public void saveWorkItem(ProcessInstance instance, ResultPayload payload)'
SET FormActivity.`getParameter` = 'public String getParameter(Map parameterMap, String key)'
SET FormActivity.`getMappedResult` = 'public Map getMappedResult(ProcessInstance instance)'
SET FormActivity.`createParameterMapFromRequest` = 'public Map createParameterMapFromRequest(HttpServletRequest request )'
SET FormActivity.`createParameterMapFromRequest` = 'public Map createParameterMapFromRequest(boolean isSimulate, HttpServletRequest request)'
SET FormActivity.`onSave` = 'protected void onSave(ProcessInstance instance, Map parameterMap_)'
SET FormActivity.`saveFormVariableXML` = 'public void saveFormVariableXML(ProcessInstance instance, Map valueMap, String filePath)'
SET FormActivity.`saveFormHTML` = 'private void saveFormHTML(ProcessInstance instance, Map valueMap, String filePath)'
SET FormActivity.`getWriter` = 'public PrintWriter getWriter()'
SET FormActivity.`getWriter` = 'public PrintWriter getWriter()'
SET FormActivity.`getFormDefinitionVersionId` = 'public String getFormDefinitionVersionId(ProcessInstance instance, ProcessManagerRemote pm)'
SET FormActivity.`getFormDefinitionPath` = 'public String getFormDefinitionPath(ProcessInstance instance, ProcessManagerRemote pm)'
SET FormActivity.`onSave` = 'public void onSave(ProcessInstance instance, HttpServletRequest request)'
SET FormActivity.`getTool` = 'public String getTool()'
SET FormActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET FormActivity.`validate` = 'public ValidationContext validate(Map options)'
SET FormActivity.`saveSnapshotHTML` = 'protected void saveSnapshotHTML(ProcessInstance instance)'
SET ConfirmActivity.`getTool` = 'public String getTool()'
SET ConfirmActivity.`isAutoComplete` = 'public boolean isAutoComplete()'
SET ConfirmActivity.`setAutoComplete` = 'public void setAutoComplete(boolean isAutoComplete)'
SET ConfirmActivity.`isViewMode` = 'public boolean isViewMode()'
SET ConfirmActivity.`setViewMode` = 'public void setViewMode(boolean isViewMode)'
SET ConfirmActivity.`onSave` = 'protected void onSave(ProcessInstance instance, Map parameterMap_)'
SET FormApprovalActivity.`getTool` = 'public String getTool()'
SET FormApprovalActivity.`createParameter` = 'public Map createParameter(ProcessInstance instance)'
SET FormApprovalActivity.`getActualMapping` = 'public RoleMapping getActualMapping(ProcessInstance instance)'
SET FormApprovalActivity.`createApproverRoleName` = 'protected String createApproverRoleName()'
SET FormApprovalActivity.`getApprover` = 'public RoleMapping getApprover(ProcessInstance instance)'
SET FormApprovalActivity.`setApprover` = 'public void setApprover(ProcessInstance instance, RoleMapping approver)'
SET FormApprovalActivity.`getRole` = 'public Role getRole()'
SET FormApprovalActivity.`getName` = 'public String getName()'
SET FormApprovalActivity.`getDisplayName` = 'public TextContext getDisplayName()'
SET FormApprovalActivity.`getMapping` = 'public RoleMapping getMapping(ProcessInstance inst, String tracingTag)'
SET FormApprovalActivity.`isViewMode` = 'public boolean isViewMode()'
SET FormApprovalActivity.`setViewMode` = 'public void setViewMode(boolean isViewMode)'
SET FormApprovalActivity.`arbitraryApprove` = 'public void arbitraryApprove(ProcessInstance instance)'
SET FormApprovalActivity.`rejectApprove` = 'public void rejectApprove(ProcessInstance instance)'
SET FormApprovalActivity.`setApprovalStatus` = 'public void setApprovalStatus(ProcessInstance instance, String status)'
SET FormApprovalActivity.`getApprovalStatus` = 'public String getApprovalStatus(ProcessInstance instance)'
SET FormApprovalActivity.`getApprovalLineActivity` = 'public FormApprovalLineActivity getApprovalLineActivity()'
SET FormApprovalActivity.`afterComplete` = 'protected void afterComplete(ProcessInstance instance)'
SET FormApprovalActivity.`onSave` = 'protected void onSave(ProcessInstance instance, Map parameterMap_)'
SET FormApprovalActivity.`isArbitraryApprovable` = 'public boolean isArbitraryApprovable()'
SET FormApprovalActivity.`setArbitraryApprovable` = 'public void setArbitraryApprovable(boolean isArbitraryApprovable)'
SET CirculationFormActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET DocumentActivity.`getDocumentFile` = 'public FileContext getDocumentFile()'
SET DocumentActivity.`setDocumentFile` = 'public void setDocumentFile(FileContext value)'
SET DocumentActivity.`isUseWebDav` = 'public boolean isUseWebDav()'
SET DocumentActivity.`setUseWebDav` = 'public void setUseWebDav(boolean b)'
SET DocumentActivity.`getUploadFTPAddress` = 'public String getUploadFTPAddress()'
SET DocumentActivity.`setUploadFTPAddress` = 'public void setUploadFTPAddress(String uploadFTPaddress)'
SET DocumentActivity.`getUploadFTPDirectory` = 'public String getUploadFTPDirectory()'
SET DocumentActivity.`setUploadFTPDirectory` = 'public void setUploadFTPDirectory(String uploadFTPDirectory)'
SET DocumentActivity.`getFTPid` = 'public String getFTPid()'
SET DocumentActivity.`setFTPid` = 'public void setFTPid(String fTPid)'
SET DocumentActivity.`getFTPpw` = 'public String getFTPpw()'
SET DocumentActivity.`setFTPpw` = 'public void setFTPpw(String fTPpw)'
SET DocumentActivity.`getTool` = 'public String getTool()'
SET DocumentActivity.`setTool` = 'public void setTool(String value)'
SET DocumentActivity.`getWIHAddress` = 'protected String getWIHAddress(ActivityInstance instance)'
SET DocumentActivity.`validate` = 'public ValidationContext validate(Map options)'
SET DocumentActivity.`createParameter` = 'public Map createParameter(ProcessInstance instance)'
SET ExcelSheetActivity.`getSavingFileName` = 'public String getSavingFileName()'
SET ExcelSheetActivity.`getSavingFileName` = 'public String getSavingFileName(ProcessInstance instance)'
SET ExcelSheetActivity.`setSavingFileName` = 'public void setSavingFileName(String savingFileName)'
SET ExcelSheetActivity.`getTemplateDocumentFile` = 'public FileContext getTemplateDocumentFile()'
SET ExcelSheetActivity.`setTemplateDocumentFile` = 'public void setTemplateDocumentFile(FileContext templateDocumentFile)'
SET ExcelSheetActivity.`getFullFTPURL` = 'private String getFullFTPURL(ProcessInstance instance)'
SET ExcelSheetActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET ExcelSheetActivity.`onComplete` = 'public boolean onComplete(ProcessInstance instance, Object payload)'
SET ExcelSheetActivity.`getActivityDetails` = 'public Map getActivityDetails(ProcessInstance inst, String locale)'
SET ExcelSheetActivity.`validate` = 'public ValidationContext validate(Map options)'
SET ExcelSheetActivity.`createParameter` = 'public Map createParameter(ProcessInstance instance)'
SET URLActivity.`getUrl` = 'public String getUrl()'
SET URLActivity.`setUrl` = 'public void setUrl(String string)'
SET URLActivity.`getUrlWhenSuccess` = 'public String getUrlWhenSuccess()'
SET URLActivity.`setUrlWhenSuccess` = 'public void setUrlWhenSuccess(String urlWhenSuccess)'
SET URLActivity.`getResultURLPV` = 'public ProcessVariable getResultURLPV()'
SET URLActivity.`setResultURLPV` = 'public void setResultURLPV(ProcessVariable resultURLPV)'
SET URLActivity.`getResultHTMLPV` = 'public ProcessVariable getResultHTMLPV()'
SET URLActivity.`setResultHTMLPV` = 'public void setResultHTMLPV(ProcessVariable resultHTMLPV)'
SET URLActivity.`setMappingFromResultHTML` = 'public void setMappingFromResultHTML(ParameterContext[] mappingFromResultHTML)'
SET URLActivity.`createURL` = 'protected String createURL(ProcessInstance inst)'
SET URLActivity.`createParameter` = 'public Map createParameter(ProcessInstance instance)'
SET URLActivity.`getExtraMessage` = 'protected String getExtraMessage(ProcessInstance instance)'
SET URLActivity.`getActivityDetails` = 'public Map getActivityDetails(ProcessInstance inst)'
SET URLActivity.`onComplete` = 'public boolean onComplete(ProcessInstance instance, Object payload)'
SET ApprovalActivity.`getTool` = 'public String getTool()'
SET ApprovalActivity.`getName` = 'public TextContext getName()'
SET ApprovalActivity.`createParameter` = 'public Map createParameter(ProcessInstance instance)'
SET ApprovalActivity.`getActualMapping` = 'public RoleMapping getActualMapping(ProcessInstance instance)'
SET ApprovalActivity.`getApprover` = 'public RoleMapping getApprover()'
SET ApprovalActivity.`setApprover` = 'public void setApprover(RoleMapping approver)'
SET ApprovalActivity.`getRole` = 'public Role getRole()'
SET ApprovalActivity.`getDisplayName` = 'public TextContext getDisplayName()'
SET ApprovalActivity.`getMapping` = 'public RoleMapping getMapping(ProcessInstance inst, String tracingTag)'
SET ApprovalActivity.`arbitraryApprove` = 'public void arbitraryApprove(ProcessInstance instance)'
SET ApprovalActivity.`rejectApprove` = 'public void rejectApprove(ProcessInstance instance)'
SET ApprovalActivity.`setApprovalStatus` = 'public void setApprovalStatus(ProcessInstance instance, String status)'
SET ApprovalActivity.`getApprovalStatus` = 'public String getApprovalStatus(ProcessInstance instance)'
SET ApprovalActivity.`getApprovalLineActivity` = 'public ApprovalLineActivity getApprovalLineActivity()'
SET ApprovalActivity.`afterComplete` = 'protected void afterComplete(ProcessInstance instance)'
SET OfficeDocumentActivity.`getVariableForOfficeDocumentInstance` = 'public ProcessVariable getVariableForOfficeDocumentInstance()'
SET OfficeDocumentActivity.`getMappingContext` = 'public MappingContext getMappingContext()'
SET OfficeDocumentActivity.`setMappingContext` = 'public void setMappingContext(MappingContext mappingContext)'
SET OfficeDocumentActivity.`getTool` = 'public String getTool()'
SET OfficeDocumentActivity.`getMappedResult` = 'public Map getMappedResult(ProcessInstance instance)'
SET OfficeDocumentActivity.`logic` = 'public void logic(Object target)'
SET OfficeDocumentActivity.`afterComplete` = 'protected void afterComplete(ProcessInstance instance)'
SET HumanApprovalActivity.`getTool` = 'public String getTool()'
SET HumanApprovalActivity.`createParameter` = 'public Map createParameter(ProcessInstance instance)'
SET HumanApprovalActivity.`getActualMapping` = 'public RoleMapping getActualMapping(ProcessInstance instance)'
SET HumanApprovalActivity.`createApproverRoleName` = 'protected String createApproverRoleName()'
SET HumanApprovalActivity.`getApprover` = 'public RoleMapping getApprover(ProcessInstance instance)'
SET HumanApprovalActivity.`setApprover` = 'public void setApprover(ProcessInstance instance, RoleMapping approver)'
SET HumanApprovalActivity.`getRole` = 'public Role getRole()'
SET HumanApprovalActivity.`getDisplayName` = 'public TextContext getDisplayName()'
SET HumanApprovalActivity.`getMapping` = 'public RoleMapping getMapping(ProcessInstance inst, String tracingTag)'
SET HumanApprovalActivity.`isViewMode` = 'public boolean isViewMode()'
SET HumanApprovalActivity.`setViewMode` = 'public void setViewMode(boolean isViewMode)'
SET HumanApprovalActivity.`arbitraryApprove` = 'public void arbitraryApprove(ProcessInstance instance)'
SET HumanApprovalActivity.`rejectApprove` = 'public void rejectApprove(ProcessInstance instance)'
SET HumanApprovalActivity.`setApprovalStatus` = 'public void setApprovalStatus(ProcessInstance instance, String status)'
SET HumanApprovalActivity.`getApprovalStatus` = 'public String getApprovalStatus(ProcessInstance instance)'
SET HumanApprovalActivity.`getApprovalLineActivity` = 'public HumanApprovalLineActivity getApprovalLineActivity()'
SET HumanApprovalActivity.`afterComplete` = 'protected void afterComplete(ProcessInstance instance)'
SET HumanApprovalActivity.`isArbitraryApprovable` = 'public boolean isArbitraryApprovable()'
SET HumanApprovalActivity.`setArbitraryApprovable` = 'public void setArbitraryApprovable(boolean isArbitraryApprovable)'
SET TelnetNormalActivity.`setTelnetConfigHosts` = 'public void setTelnetConfigHosts(TelnetConfigHost[] telnetConfigHosts)'
SET TelnetNormalActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET TelnetNormalActivity.`afterExecute` = 'public void afterExecute(ProcessInstance instance)'
SET WaitActivity.`enableIf` = 'public boolean enableIf(Object dependencyFieldValue)'
SET WaitActivity.`enableIf` = 'public boolean enableIf(Object dependencyFieldValue)'
SET WaitActivity.`enableIf` = 'public boolean enableIf(Object dependencyFieldValue)'
SET WaitActivity.`getMessage` = 'public String getMessage()'
SET WaitActivity.`getHowWait` = 'public String getHowWait()'
SET WaitActivity.`setHowWait` = 'public void setHowWait(String waitingType)'
SET WaitActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET WaitActivity.`run` = 'public void run()'
SET WaitActivity.`beforeCommit` = 'public void beforeCommit(TransactionContext tx)'
SET WaitActivity.`beforeRollback` = 'public void beforeRollback(TransactionContext tx)'
SET WaitActivity.`afterCommit` = 'public void afterCommit(TransactionContext tx)'
SET WaitActivity.`afterRollback` = 'public void afterRollback(TransactionContext tx)'
SET EmptyActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET LocalMessengerActivity.`validate` = 'public String validate(Object arg0, Instance arg1)'
SET LocalMessengerActivity.`getContents` = 'public String getContents()'
SET LocalMessengerActivity.`setContents` = 'public void setContents(String value)'
SET LocalMessengerActivity.`getToRole` = 'public Role getToRole()'
SET LocalMessengerActivity.`setToRole` = 'public void setToRole(Role value)'
SET LocalMessengerActivity.`executeActivity` = 'public void executeActivity(ProcessInstance instance)'
SET LocalMessengerActivity.`interceptEvent` = 'public boolean interceptEvent(Activity activity, String command, ProcessInstance instance, Object payload)'
SET SMSActivity.`findRelative` = 'public RoleMapping findRelative(RoleMapping roleMap)'
SET MappingActivity.`getMappingContext` = 'public MappingContext getMappingContext()'
SET MappingActivity.`setMappingContext` = 'public void setMappingContext(MappingContext mappingContext)'
SET MappingActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET DatabaseMappingActivity.`executeActivity` = 'public void executeActivity(ProcessInstance instance)'
SET DatabaseMappingActivity.`getProcessDefinition` = 'public ProcessDefinition getProcessDefinition()'
SET DatabaseMappingActivity.`fireComplete` = 'public void fireComplete(ProcessInstance instance)'
SET DatabaseMappingActivity.`getTableName` = 'public String getTableName()'
SET DatabaseMappingActivity.`setTableName` = 'public void setTableName(String tableName)'
SET DatabaseMappingActivity.`getConnectionFactory` = 'public ConnectionFactory getConnectionFactory()'
SET DatabaseMappingActivity.`setConnectionFactory` = 'public void setConnectionFactory(ConnectionFactory factory)'
SET DatabaseMappingActivity.`isApplySingleValueOnly` = 'public boolean isApplySingleValueOnly()'
SET DatabaseMappingActivity.`setApplySingleValueOnly` = 'public void setApplySingleValueOnly(boolean applySingleValueOnly)'
SET DatabaseMappingActivity.`getQueryMode` = 'public int getQueryMode()'
SET DatabaseMappingActivity.`setQueryMode` = 'public void setQueryMode(int queryMode)'
SET FileGenerateActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET FileGenerateActivity.`getContent` = 'public String getContent()'
SET FileGenerateActivity.`setContent` = 'public void setContent(String string)'
SET FileGenerateActivity.`getFilePath` = 'public String getFilePath()'
SET FileGenerateActivity.`setFilePath` = 'public void setFilePath(String string)'
SET FileGenerateActivity.`isAppend` = 'public boolean isAppend()'
SET FileGenerateActivity.`setAppend` = 'public void setAppend(boolean b)'
SET AssignActivity.`getAssignStyle` = 'public int getAssignStyle()'
SET AssignActivity.`setAssignStyle` = 'public void setAssignStyle(int assignStyle)'
SET AssignActivity.`getAssignValueInputType` = 'public String getAssignValueInputType()'
SET AssignActivity.`setAssignValueInputType` = 'public void setAssignValueInputType(String assignValueInputType)'
SET AssignActivity.`getVariable` = 'public ProcessVariable getVariable()'
SET AssignActivity.`setVariable` = 'public void setVariable(ProcessVariable value)'
SET AssignActivity.`getVal` = 'public Object getVal()'
SET AssignActivity.`setVal` = 'public void setVal(Object value)'
SET AssignActivity.`getAssignValue` = 'public String getAssignValue()'
SET AssignActivity.`setAssignValue` = 'public void setAssignValue(String assignValue)'
SET AssignActivity.`generateJavaCode` = 'private String generateJavaCode(String scriptSmt)'
SET AssignActivity.`scriptCalculator` = 'public Serializable scriptCalculator(ProcessInstance instance , String scriptSmt)'
SET AssignActivity.`scriptEngine` = 'public Object scriptEngine(String scriptSmt)'
SET AssignActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET AssignActivity.`validate` = 'public ValidationContext validate(Map options)'
SET ComplexActivity.`setRoles` = 'public void setRoles(Role[] roles)'
SET ComplexActivity.`getRole` = 'public Role getRole(String roleName)'
SET ComplexActivity.`isOpenTo` = 'public boolean isOpenTo(String roleName)'
SET ComplexActivity.`addRole` = 'public void addRole(Role role)'
SET ComplexActivity.`getProcessVariable` = 'public ProcessVariable getProcessVariable(String pvName)'
SET ComplexActivity.`setProcessVariables` = 'public void setProcessVariables(ProcessVariable[] pvds)'
SET ComplexActivity.`getChildActivities` = 'public Vector getChildActivities()'
SET ComplexActivity.`setChildActivities` = 'public void setChildActivities(Vector value)'
SET ComplexActivity.`createInstance` = 'public ProcessInstance createInstance(ProcessInstance instanceInCreating)'
SET ComplexActivity.`getCurrentStep` = 'public int getCurrentStep(ProcessInstance instance)'
SET ComplexActivity.`setCurrentStep` = 'public void setCurrentStep(ProcessInstance instance, int currStep)'
SET ComplexActivity.`onEvent` = 'protected void onEvent(String command, ProcessInstance instance, Object payload)'
SET ComplexActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET ComplexActivity.`beforeSerialization` = 'public void beforeSerialization()'
SET ComplexActivity.`afterDeserialization` = 'public void afterDeserialization()'
SET ComplexActivity.`queueActivity` = 'protected void queueActivity(final Activity act, ProcessInstance instance_)'
SET ComplexActivity.`run` = 'public void run()'
SET ComplexActivity.`run` = 'public void run()'
SET ComplexActivity.`beforeCommit` = 'public void beforeCommit(TransactionContext tx)'
SET ComplexActivity.`beforeRollback` = 'public void beforeRollback(TransactionContext tx)'
SET ComplexActivity.`afterCommit` = 'public void afterCommit(TransactionContext tx)'
SET ComplexActivity.`afterRollback` = 'public void afterRollback(TransactionContext tx)'
SET ComplexActivity.`run` = 'public void run()'
SET ComplexActivity.`afterCommit` = 'public void afterCommit(TransactionContext tx)'
SET ComplexActivity.`afterRollback` = 'public void afterRollback(TransactionContext tx)'
SET ComplexActivity.`beforeCommit` = 'public void beforeCommit(TransactionContext tx)'
SET ComplexActivity.`beforeRollback` = 'public void beforeRollback(TransactionContext tx)'
SET ComplexActivity.`validate` = 'public ValidationContext validate(Map options)'
SET ComplexActivity.`skip` = 'public void skip(ProcessInstance instance)'
SET ComplexActivity.`compensate` = 'public void compensate(ProcessInstance instance)'
SET ComplexActivity.`compensateOneStep` = 'public void compensateOneStep(ProcessInstance instance)'
SET ComplexActivity.`compensateOneStep` = 'public void compensateOneStep(ActivityInstance instance)'
SET ComplexActivity.`skipOneStep` = 'public void skipOneStep(ActivityInstance instance)'
SET ComplexActivity.`reset` = 'public void reset(ProcessInstance instance)'
SET ComplexActivity.`suspend` = 'public void suspend(ProcessInstance instance)'
SET ComplexActivity.`stop` = 'public void stop(ProcessInstance instance)'
SET ComplexActivity.`stop` = 'public void stop(ProcessInstance instance,String status)'
SET ComplexActivity.`onChanged` = 'protected void onChanged(ProcessInstance instance)'
SET ComplexActivity.`autoTag` = 'protected void autoTag(Activity child)'
SET ComplexActivity.`findChildActivity` = 'public Activity findChildActivity(final Class type)'
SET ComplexActivity.`logic` = 'public void logic(Activity activity)'
SET ComplexActivity.`getPreviousActivitiesOf` = 'public Vector getPreviousActivitiesOf(Activity child)'
SET ComplexActivity.`getLastActivities` = 'public Vector getLastActivities()'
SET ComplexActivity.`gatherPropagatedActivitiesOf` = 'protected void gatherPropagatedActivitiesOf(ProcessInstance instance, Activity child, List list)'
SET ComplexActivity.`registerToProcessDefinition` = 'public boolean registerToProcessDefinition(boolean autoTagging, boolean checkCollision)'
SET ComplexActivity.`compensateChild` = 'protected boolean compensateChild(ProcessInstance instance, Activity child)'
SET ComplexActivity.`getInitiatorHumanActivityReference` = 'public ActivityReference getInitiatorHumanActivityReference(final ProcessTransactionContext ptc)'
SET ComplexActivity.`logic` = 'public void logic(Activity activity)'
SET ComplexActivity.`usabilityCheck` = 'public void usabilityCheck(Map values)'
SET ComplexActivity.`getFieldValue` = 'public Object getFieldValue(IDAO dao, Map genericContext)'
SET ComplexActivity.`getFieldName` = 'public String getFieldName()'
SET RequestAndReceiveActivity.`queueActivity` = 'protected void queueActivity(final Activity act, final ActivityInstance instance)'
SET RequestAndReceiveActivity.`getOutput` = 'public ProcessVariable getOutput()'
SET RequestAndReceiveActivity.`setOutput` = 'public void setOutput(ProcessVariable variable)'
SET CompensatableActivity.`onEvent` = 'protected void onEvent(String command, ProcessInstance instance, Object payload)'
SET CompensatableActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET CompensatableActivity.`compensate` = 'public void compensate(ProcessInstance instance)'
SET SwitchActivity.`setConditions` = 'public void setConditions(Condition[] value)'
SET SwitchActivity.`getDefaultActivity` = 'public Activity getDefaultActivity()'
SET SwitchActivity.`isOperateAsIfThenElse` = 'public boolean isOperateAsIfThenElse()'
SET SwitchActivity.`setOperateAsIfThenElse` = 'public void setOperateAsIfThenElse(boolean operateAsIfThenElse)'
SET SwitchActivity.`setFinishedPathCount` = 'public void setFinishedPathCount(ProcessInstance instance, int val)'
SET SwitchActivity.`getFinishedPathCount` = 'public int getFinishedPathCount(ProcessInstance instance)'
SET SwitchActivity.`Serializable` = 'private Integer Serializable(Integer integer)'
SET SwitchActivity.`setAllPathCount` = 'public void setAllPathCount(ProcessInstance instance, int val)'
SET SwitchActivity.`getAllPathCount` = 'public int getAllPathCount(ProcessInstance instance)'
SET SwitchActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET SwitchActivity.`onEvent` = 'protected void onEvent(String command, ProcessInstance instance, Object payload)'
SET SwitchActivity.`executeActivity` = 'protected void executeActivity(ActivityInstance instance)'
SET SwitchActivity.`validate` = 'public ValidationContext validate(Map options)'
SET SwitchActivity.`gatherPropagatedActivitiesOf` = 'protected void gatherPropagatedActivitiesOf(ProcessInstance instance, Activity child, List list)'
SET SwitchActivity.`compensateOneStep` = 'public void compensateOneStep(ProcessInstance instance)'
SET AtomicHumanActivity.`executePreActivities` = 'public void executePreActivities(ProcessInstance instance)'
SET AtomicHumanActivity.`interceptEvent` = 'public boolean interceptEvent(Activity activity, String command, ProcessInstance instance, Object payload)'
SET AtomicHumanActivity.`validate` = 'public ValidationContext validate(Map options)'
SET ApprovalLineActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET ApprovalLineActivity.`setApprovalLineStatus` = 'public void setApprovalLineStatus(ProcessInstance instance, String status)'
SET ApprovalLineActivity.`getApprovalLineStatus` = 'public String getApprovalLineStatus(ProcessInstance instance)'
SET ApprovalLineActivity.`getDraftActivity` = 'public ApprovalActivity getDraftActivity()'
SET ApprovalLineActivity.`logic` = 'public void logic(Activity activity)'
SET MultipleWorkerActivity.`onEvent` = 'protected void onEvent(String command, ProcessInstance instance, Object payload)'
SET MultipleWorkerActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET MultipleWorkerActivity.`getMultipleWorker` = 'public RoleMapping getMultipleWorker()'
SET MultipleWorkerActivity.`setMultipleWorker` = 'public void setMultipleWorker(RoleMapping mapping)'
SET AtomicActivity.`queueActivity` = 'protected void queueActivity(final Activity act, final ProcessInstance instance)'
SET ReceiveAndReplyActivity.`queueActivity` = 'protected void queueActivity(final Activity act, final ActivityInstance instance)'
SET ReceiveAndReplyActivity.`getOutput` = 'public ProcessVariable getOutput()'
SET ReceiveAndReplyActivity.`setOutput` = 'public void setOutput(ProcessVariable variable)'
SET LoopActivity.`getLoopingCondition` = 'public Condition getLoopingCondition()'
SET LoopActivity.`setLoopingCondition` = 'public void setLoopingCondition(Condition value)'
SET LoopActivity.`isWorklistHistoryManagement` = 'public boolean isWorklistHistoryManagement()'
SET LoopActivity.`setWorklistHistoryManagement` = 'public void setWorklistHistoryManagement(boolean worklistHistoryManagement)'
SET LoopActivity.`setLoopingCount` = 'public void setLoopingCount(ProcessInstance instance, int val)'
SET LoopActivity.`getLoopingCount` = 'public int getLoopingCount(ProcessInstance instance)'
SET LoopActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET LoopActivity.`executeActivity` = 'public void executeActivity(ProcessInstance instance)'
SET LoopActivity.`validate` = 'public ValidationContext validate(Map options)'
SET AllActivity.`onEvent` = 'protected void onEvent(String command, ProcessInstance instance, Object payload)'
SET AllActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET AllActivity.`onChanged` = 'protected void onChanged(ProcessInstance instance)'
SET AllActivity.`getPreviousActivitiesOf` = 'public Vector getPreviousActivitiesOf(Activity child)'
SET AllActivity.`getLastActivities` = 'public Vector getLastActivities()'
SET AllActivity.`gatherPropagatedActivitiesOf` = 'protected void gatherPropagatedActivitiesOf(ProcessInstance instance, Activity child, List list)'
SET AllActivity.`compensateOneStep` = 'public void compensateOneStep(ProcessInstance instance)'
SET AllActivity.`isSerializable` = 'public boolean isSerializable(Class cls)'
SET AllActivity.`serialize` = 'public void serialize(Object sourceObj, OutputStream os, Hashtable extendedContext)'
SET AllActivity.`deserialize` = 'public Object deserialize(InputStream is, Hashtable extendedContext)'
SET AllActivity.`beforeDeploy` = 'public void beforeDeploy(ProcessDefinition definition, ProcessTransactionContext tc, String folder,boolean isNew)'
SET AllActivity.`afterDeploy` = 'public void afterDeploy(String folder, ProcessDefinition definition, ProcessTransactionContext tc)'
SET ScopeActivity.`getProcessVariable` = 'public ProcessVariable getProcessVariable(String pvName)'
SET ScopeActivity.`setProcessVariables` = 'public void setProcessVariables(ProcessVariable[] pvds)'
SET ScopeActivity.`setEventHandlers` = 'public void setEventHandlers(EventHandler[] eventHandlers)'
SET ScopeActivity.`isLeaveEventListenersEvenIfOutOfScope` = 'public boolean isLeaveEventListenersEvenIfOutOfScope()'
SET ScopeActivity.`isCollapsed` = 'public boolean isCollapsed()'
SET ScopeActivity.`setCollapsed` = 'public void setCollapsed(boolean isCollapsed)'
SET ScopeActivity.`afterDeserialization` = 'public void afterDeserialization()'
SET ScopeActivity.`beforeExecute` = 'protected void beforeExecute(ProcessInstance instance)'
SET ScopeActivity.`afterComplete` = 'protected void afterComplete(ProcessInstance instance)'
SET ScopeActivity.`fireEventHandlers` = 'public boolean fireEventHandlers(ProcessInstance instance, int triggerType, EventMessagePayload emp)'
SET ScopeActivity.`onMessage` = 'public boolean onMessage(ProcessInstance instance, Object payload)'
SET ScopeActivity.`onEvent` = 'protected void onEvent(String command, ProcessInstance instance, Object payload)'
SET ScopeActivity.`getEventHandler` = 'public EventHandler getEventHandler(String eventName)'
SET ScopeActivity.`getMessage` = 'public String getMessage()'
SET ScopeActivity.`registerToProcessDefinition` = 'public boolean registerToProcessDefinition(boolean autoTagging, boolean checkCollision)'
SET ScopeActivity.`compensate` = 'public void compensate(ProcessInstance instance)'
SET ScopeActivity.`validate` = 'public ValidationContext validate(Map options)'
SET ProcessDefinition.`getActivity` = 'public Activity getActivity(String tracingTag)'
SET ProcessDefinition.`setServiceDefinitions` = 'public void setServiceDefinitions(ServiceDefinition[] sds)'
SET ProcessDefinition.`addServiceDefinition` = 'public void addServiceDefinition(ServiceDefinition sd)'
SET ProcessDefinition.`getDefaultFlowchartViewType` = 'public String getDefaultFlowchartViewType()'
SET ProcessDefinition.`setDefaultFlowchartViewType` = 'public void setDefaultFlowchartViewType(String viewType)'
SET ProcessDefinition.`getDefaultFlowchartOption` = 'public String getDefaultFlowchartOption()'
SET ProcessDefinition.`setDefaultFlowchartViewOption` = 'public void setDefaultFlowchartViewOption(String viewOption)'
SET ProcessDefinition.`isAbstract` = 'public boolean isAbstract()'
SET ProcessDefinition.`setAbstract` = 'public void setAbstract(boolean isAbstract)'
SET ProcessDefinition.`getDuration` = 'public int getDuration()'
SET ProcessDefinition.`setDuration` = 'public void setDuration(int duration)'
SET ProcessDefinition.`getSimulationInstanceCount` = 'public int getSimulationInstanceCount()'
SET ProcessDefinition.`setSimulationInstanceCount` = 'public void setSimulationInstanceCount(int simultationInstanceCount)'
SET ProcessDefinition.`getSimulationInputFrequency` = 'public int getSimulationInputFrequency()'
SET ProcessDefinition.`setSimulationInputFrequency` = 'public void setSimulationInputFrequency(int simulationInputFrequency)'
SET ProcessDefinition.`getSimulationInputFrequencyDeviation` = 'public int getSimulationInputFrequencyDeviation()'
SET ProcessDefinition.`setSimulationResources` = 'public void setSimulationResources(SimulationResource[] simulationResources)'
SET ProcessDefinition.`setReservedXmlTypes` = 'public void setReservedXmlTypes(QName[] names)'
SET ProcessDefinition.`setMessageDefinitions` = 'public void setMessageDefinitions(MessageDefinition[] definitions)'
SET ProcessDefinition.`getRevisionInfoList` = 'public ArrayList getRevisionInfoList()'
SET ProcessDefinition.`setRevisionInfoList` = 'public void setRevisionInfoList(ArrayList revisionInfoList)'
SET ProcessDefinition.`addRevisionInfo` = 'public void addRevisionInfo(RevisionInfo revisionInfo)'
SET ProcessDefinition.`clearWithOutLastRevisionInfo` = 'public void clearWithOutLastRevisionInfo()'
SET ProcessDefinition.`getWsdlLocation` = 'public String getWsdlLocation()'
SET ProcessDefinition.`setWsdlLocation` = 'public void setWsdlLocation(String string)'
SET ProcessDefinition.`getEndpoint` = 'public String getEndpoint()'
SET ProcessDefinition.`setEndpoint` = 'public void setEndpoint(String string)'
SET ProcessDefinition.`isArchive` = 'public boolean isArchive()'
SET ProcessDefinition.`setArchive` = 'public void setArchive(boolean boolean1)'
SET ProcessDefinition.`getUEngineVersion` = 'public int getUEngineVersion()'
SET ProcessDefinition.`setUEngineVersion` = 'public void setUEngineVersion(int i)'
SET ProcessDefinition.`getId` = 'public String getId()'
SET ProcessDefinition.`setId` = 'public void setId(String string)'
SET ProcessDefinition.`getVersion` = 'public int getVersion()'
SET ProcessDefinition.`setVersion` = 'public void setVersion(int i)'
SET ProcessDefinition.`getBelongingDefinitionId` = 'public String getBelongingDefinitionId()'
SET ProcessDefinition.`setBelongingDefinitionId` = 'public void setBelongingDefinitionId(String string)'
SET ProcessDefinition.`setActivityFilters` = 'public void setActivityFilters(ActivityFilter[] filters)'
SET ProcessDefinition.`getTitle` = 'public String getTitle()'
SET ProcessDefinition.`setTitle` = 'public void setTitle(String string)'
SET ProcessDefinition.`isAdhoc` = 'public boolean isAdhoc()'
SET ProcessDefinition.`setAdhoc` = 'public void setAdhoc(boolean b)'
SET ProcessDefinition.`getShortDescription` = 'public String getShortDescription()'
SET ProcessDefinition.`setShortDescription` = 'public void setShortDescription(String string)'
SET ProcessDefinition.`isInitiateByFirstWorkitem` = 'public boolean isInitiateByFirstWorkitem()'
SET ProcessDefinition.`setInitiateByFirstWorkitem` = 'public void setInitiateByFirstWorkitem(boolean b)'
SET ProcessDefinition.`setWorklistFields` = 'public void setWorklistFields(ListField[] worklistFields)'
SET ProcessDefinition.`getInitiatorHumanActivity` = 'public HumanActivity getInitiatorHumanActivity()'
SET ProcessDefinition.`logic` = 'public void logic(Activity activity)'
SET ProcessDefinition.`setInstanceListFields` = 'public void setInstanceListFields(ListField[] instanceListFields)'
SET ProcessDefinition.`setWorkListFields` = 'public void setWorkListFields(ListField[] workListFields)'
SET ProcessDefinition.`getCurrentLocale` = 'public String getCurrentLocale()'
SET ProcessDefinition.`setCurrentLocale` = 'public void setCurrentLocale(String currentLocale)'
SET ProcessDefinition.`isVolatile` = 'public boolean isVolatile()'
SET ProcessDefinition.`setVolatile` = 'public void setVolatile(boolean isVolatile)'
SET ProcessDefinition.`getInitiatorHumanActivityReference` = 'public ActivityReference getInitiatorHumanActivityReference(final ProcessTransactionContext ptc)'
SET ProcessDefinition.`getModifiedDate` = 'public Calendar getModifiedDate()'
SET ProcessDefinition.`setModifiedDate` = 'public void setModifiedDate(Calendar calendar)'
SET ProcessDefinition.`getProcessType` = 'public int getProcessType()'
SET ProcessDefinition.`setProcessType` = 'public void setProcessType(int i)'
SET ProcessDefinition.`getNextActivitySequence` = 'public long getNextActivitySequence()'
SET ProcessDefinition.`getActivitySequence` = 'public long getActivitySequence()'
SET ProcessDefinition.`setActivitySequence` = 'public void setActivitySequence(long l)'
SET ProcessDefinition.`getDueDate` = 'public Calendar getDueDate(ProcessInstance instance)'
SET ProcessDefinition.`setDueDate` = 'public void setDueDate(ProcessInstance instance, Calendar dueDate)'
SET ProcessDefinition.`createInstance` = 'public ProcessInstance createInstance(String name, Map options)'
SET ProcessDefinition.`registerActivity` = 'protected boolean registerActivity(Activity act, boolean autoTagging)'
SET ProcessDefinition.`registerActivity` = 'protected boolean registerActivity(Activity act, boolean autoTagging, boolean checkCollision)'
SET ProcessDefinition.`registerActivity` = 'protected void registerActivity(Activity act)'
SET ProcessDefinition.`getDefinition` = 'public ProcessDefinition getDefinition(String defVerId, ProcessTransactionContext ptc)'
SET ProcessDefinition.`addMessageListener` = 'public void addMessageListener(ProcessInstance instance, MessageListener ml)'
SET ProcessDefinition.`addMessageListener` = 'protected void addMessageListener(String message, ProcessInstance instance, String scope)'
SET ProcessDefinition.`removeMessageListener` = 'protected void removeMessageListener(String message, ProcessInstance instance, String scope)'
SET ProcessDefinition.`removeMessageListener` = 'protected void removeMessageListener(ProcessInstance instance, MessageListener ml)'
SET ProcessDefinition.`fireMessage` = 'protected Object fireMessage(String message, final ProcessInstance instance, Object payload, boolean payloadIsXML)'
SET ProcessDefinition.`fireMessage` = 'public Object fireMessage(String message, ProcessInstance instance, Object payload)'
SET ProcessDefinition.`fireMessageXML` = 'public Object fireMessageXML(String message, ProcessInstance instance, String payload)'
SET ProcessDefinition.`onEvent` = 'protected void onEvent(String command, ProcessInstance instance, Object payload)'
SET ProcessDefinition.`returnToMainProcess` = 'protected void returnToMainProcess(ProcessInstance instance)'
SET ProcessDefinition.`returnToMainProcess` = 'protected void returnToMainProcess(ProcessInstance instance, boolean skipped)'
SET ProcessDefinition.`afterDeserialization` = 'public void afterDeserialization()'
SET ProcessDefinition.`flowControl` = 'public void flowControl(String command, ProcessInstance instance, String tracingTag)'
SET ProcessDefinition.`getTracingTag` = 'public String getTracingTag()'
SET ProcessDefinition.`beforeSerialization` = 'public void beforeSerialization()'
SET ProcessDefinition.`validate` = 'public ValidationContext validate(Map options)'
SET ProcessDefinition.`logic` = 'public void logic(Activity activity)'
SET ProcessDefinition.`createDesigner` = 'public ActivityDesigner createDesigner()'
SET ProcessDefinition.`reset` = 'public void reset(ProcessInstance instance)'
SET ProcessDefinition.`stop` = 'public void stop(ProcessInstance instance)'
SET ProcessDefinition.`stop` = 'public void stop(ProcessInstance instance,String status)'
SET ProcessDefinition.`getQueuingMechanism` = 'public String getQueuingMechanism(ProcessInstance instance)'
SET ProcessDefinition.`setQueuingMechanism` = 'public void setQueuingMechanism(ProcessInstance instance, String val)'
SET ProcessDefinition.`getQueuingMechanism` = 'public String getQueuingMechanism(ProcessInstance instance)'
SET ProcessDefinition.`setQueuingMechanism` = 'public void setQueuingMechanism(ProcessInstance instance, String val)'
SET ProcessDefinition.`getAlias` = 'public String getAlias()'
SET ProcessDefinition.`setAlias` = 'public void setAlias(String value)'
SET ProcessDefinition.`beforeExecute` = 'protected void beforeExecute(ProcessInstance instance)'
SET HumanApprovalLineActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET HumanApprovalLineActivity.`setApprovalLineStatus` = 'public void setApprovalLineStatus(ProcessInstance instance, String status)'
SET HumanApprovalLineActivity.`getApprovalLineStatus` = 'public String getApprovalLineStatus(ProcessInstance instance)'
SET HumanApprovalLineActivity.`resetApprovalLine` = 'public void resetApprovalLine()'
SET HumanApprovalLineActivity.`addApprovalActivity` = 'public void addApprovalActivity(ProcessInstance instance, String approveType, String activityName, String approverEndpoint)'
SET HumanApprovalLineActivity.`getDraftActivity` = 'public HumanApprovalActivity getDraftActivity()'
SET HumanApprovalLineActivity.`logic` = 'public void logic(Activity activity)'
SET HumanApprovalLineActivity.`afterExecute` = 'protected void afterExecute(ProcessInstance instance)'
SET HumanApprovalLineActivity.`afterComplete` = 'protected void afterComplete(ProcessInstance instance)'
SET HumanApprovalLineActivity.`onEvent` = 'protected void onEvent(String command, ProcessInstance instance, Object payload)'
SET HumanApprovalLineActivity.`getReferencerRole` = 'public Role getReferencerRole()'
SET HumanApprovalLineActivity.`setReferencerRole` = 'public void setReferencerRole(Role referencerRole)'
SET HumanApprovalLineActivity.`getReceiverRole` = 'public Role getReceiverRole()'
SET HumanApprovalLineActivity.`setReceiverRole` = 'public void setReceiverRole(Role receiverRole)'
SET HumanApprovalLineActivity.`getLoopingOption` = 'public int getLoopingOption()'
SET HumanApprovalLineActivity.`setLoopingOption` = 'public void setLoopingOption(int loopingOption)'
SET HumanApprovalLineActivity.`getStatusOutPV` = 'public ProcessVariable getStatusOutPV()'
SET HumanApprovalLineActivity.`setStatusOutPV` = 'public void setStatusOutPV(ProcessVariable statusOut)'
SET FormApprovalLineActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET FormApprovalLineActivity.`setApprovalLineStatus` = 'public void setApprovalLineStatus(ProcessInstance instance, String status)'
SET FormApprovalLineActivity.`getApprovalLineStatus` = 'public String getApprovalLineStatus(ProcessInstance instance)'
SET FormApprovalLineActivity.`resetApprovalLine` = 'public void resetApprovalLine()'
SET FormApprovalLineActivity.`addApprovalActivity` = 'public void addApprovalActivity(ProcessInstance instance, String approveType, String activityName, String approverEndpoint)'
SET FormApprovalLineActivity.`getDraftActivity` = 'public FormApprovalActivity getDraftActivity()'
SET FormApprovalLineActivity.`logic` = 'public void logic(Activity activity)'
SET FormApprovalLineActivity.`afterExecute` = 'protected void afterExecute(ProcessInstance instance)'
SET FormApprovalLineActivity.`afterComplete` = 'protected void afterComplete(ProcessInstance instance)'
SET FormApprovalLineActivity.`onEvent` = 'protected void onEvent(String command, ProcessInstance instance, Object payload)'
SET FormApprovalLineActivity.`getReferencerRole` = 'public Role getReferencerRole()'
SET FormApprovalLineActivity.`setReferencerRole` = 'public void setReferencerRole(Role referencerRole)'
SET FormApprovalLineActivity.`getReceiverRole` = 'public Role getReceiverRole()'
SET FormApprovalLineActivity.`setReceiverRole` = 'public void setReceiverRole(Role receiverRole)'
SET FormApprovalLineActivity.`getLoopingOption` = 'public int getLoopingOption()'
SET FormApprovalLineActivity.`setLoopingOption` = 'public void setLoopingOption(int loopingOption)'
SET FormApprovalLineActivity.`getStatusOutPV` = 'public ProcessVariable getStatusOutPV()'
SET FormApprovalLineActivity.`setStatusOutPV` = 'public void setStatusOutPV(ProcessVariable statusOut)'
SET ReferenceBlockActivity.`getReferencerRole` = 'public Role getReferencerRole()'
SET ReferenceBlockActivity.`setReferencerRole` = 'public void setReferencerRole(Role referencerRole)'
SET ReferenceBlockActivity.`queueActivity` = 'protected void queueActivity(Activity act, ProcessInstance instance)'
SET ReferenceBlockActivity.`afterComplete` = 'protected void afterComplete(ProcessInstance instance)'
SET ReferenceBlockActivity.`afterExecute` = 'protected void afterExecute(ProcessInstance instance)'
SET TryCatchActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET TryCatchActivity.`onEvent` = 'protected void onEvent(String command, ProcessInstance instance, Object payload)'
SET FlagActivity.`getFlag` = 'public String getFlag()'
SET FlagActivity.`setFlag` = 'public void setFlag(String flag)'
SET FlagActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET FlagActivity.`getFlagLocationForFlowChart` = 'public ActivitySelectionContext getFlagLocationForFlowChart(ProcessInstance instance, String flag)'
SET FlagActivity.`getFlagLocation` = 'public ActivitySelectionContext getFlagLocation(ProcessInstance instance, String flag)'
SET SoundPlayActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET SoundPlayActivity.`playSound` = 'public void playSound(ProcessInstance instance)'
SET SoundPlayActivity.`getSoundFile` = 'public FileContext getSoundFile()'
SET SoundPlayActivity.`setSoundFile` = 'public void setSoundFile(FileContext soundFile)'
SET SoundPlayActivity.`getSoundUrl` = 'public String getSoundUrl()'
SET SoundPlayActivity.`setSoundUrl` = 'public void setSoundUrl(String soundUrl)'
SET SoundPlayActivity.`doCommand` = 'public boolean doCommand(ProcessInstance instance, String variableKey)'
SET RoleAssignActivity.`getRole` = 'public Role getRole()'
SET RoleAssignActivity.`setRole` = 'public void setRole(Role value)'
SET RoleAssignActivity.`getVariableForURI` = 'public ProcessVariable getVariableForURI()'
SET RoleAssignActivity.`setVariableForURI` = 'public void setVariableForURI(ProcessVariable value)'
SET RoleAssignActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET SQLActivity.`getSqlStmt` = 'public String getSqlStmt()'
SET SQLActivity.`setSqlStmt` = 'public void setSqlStmt(String value)'
SET SQLActivity.`getConnectionFactory` = 'public ConnectionFactory getConnectionFactory()'
SET SQLActivity.`setConnectionFactory` = 'public void setConnectionFactory(ConnectionFactory factory)'
SET SQLActivity.`getConnectionString` = 'public String getConnectionString()'
SET SQLActivity.`setConnectionString` = 'public void setConnectionString(String value)'
SET SQLActivity.`getUserId` = 'public String getUserId()'
SET SQLActivity.`setUserId` = 'public void setUserId(String value)'
SET SQLActivity.`getPassword` = 'public String getPassword()'
SET SQLActivity.`setPassword` = 'public void setPassword(String value)'
SET SQLActivity.`getDriverClass` = 'public String getDriverClass()'
SET SQLActivity.`setDriverClass` = 'public void setDriverClass(String value)'
SET SQLActivity.`setParameters` = 'public void setParameters(ParameterContext[] contexts)'
SET SQLActivity.`setSelectMappings` = 'public void setSelectMappings(ParameterContext[] selectMappings)'
SET SQLActivity.`isQuery` = 'public boolean isQuery()'
SET SQLActivity.`setQuery` = 'public void setQuery(boolean b)'
SET SQLActivity.`isApplySingleValueOnly` = 'public boolean isApplySingleValueOnly()'
SET SQLActivity.`setApplySingleValueOnly` = 'public void setApplySingleValueOnly(boolean applySingleValueOnly)'
SET SQLActivity.`isReplaceWithBlankStringIfNull` = 'public boolean isReplaceWithBlankStringIfNull()'
SET SQLActivity.`setReplaceWithBlankStringIfNull` = 'public void setReplaceWithBlankStringIfNull(boolean replaceWithBlankStringIfNull)'
SET SQLActivity.`executeActivity` = 'public void executeActivity(ProcessInstance instance)'
SET SQLActivity.`setResult` = 'protected HashMap setResult(ProcessInstance instance, String varName, ResultSet rs, int colNum)'
SET SQLActivity.`getActivityDetails` = 'public Map getActivityDetails(ProcessInstance inst, String locale)'
SET SQLActivity.`validate` = 'public ValidationContext validate(Map options)'
SET WebServiceActivity2.`getEndpointAddress` = 'public String getEndpointAddress()'
SET WebServiceActivity2.`setEndpointAddress` = 'public void setEndpointAddress(String endpointAddress)'
SET WebServiceActivity2.`getPortType` = 'public String getPortType()'
SET WebServiceActivity2.`setPortType` = 'public void setPortType(String portType)'
SET WebServiceActivity2.`getOperation` = 'public String getOperation()'
SET WebServiceActivity2.`setOperation` = 'public void setOperation(String operation)'
SET WebServiceActivity2.`getBinding` = 'public String getBinding()'
SET WebServiceActivity2.`setBinding` = 'public void setBinding(String binding)'
SET WebServiceActivity2.`getRequestXML` = 'public String getRequestXML()'
SET WebServiceActivity2.`setRequestXML` = 'public void setRequestXML(String requestXML)'
SET WebServiceActivity2.`getTestResponseXML` = 'public String getTestResponseXML()'
SET WebServiceActivity2.`setTestResponseXML` = 'public void setTestResponseXML(String testResponseXML)'
SET WebServiceActivity2.`setxPathContexts` = 'public void setxPathContexts(XPathContext[] xPathContexts)'
SET WebServiceActivity2.`getOutputXMLString` = 'public ProcessVariable getOutputXMLString()'
SET WebServiceActivity2.`setOutputXMLString` = 'public void setOutputXMLString(ProcessVariable outputXMLString)'
SET WebServiceActivity2.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET WebServiceActivity2.`validate` = 'public ValidationContext validate(Map options)'
SET NamedParameterSQLActivity.`getConnectionFactory` = 'public ConnectionFactory getConnectionFactory()'
SET NamedParameterSQLActivity.`setConnectionFactory` = 'public void setConnectionFactory(ConnectionFactory factory)'
SET NamedParameterSQLActivity.`getOperation` = 'public int getOperation()'
SET NamedParameterSQLActivity.`setOperation` = 'public void setOperation(int operation)'
SET NamedParameterSQLActivity.`getSqlStatement` = 'public String getSqlStatement()'
SET NamedParameterSQLActivity.`setSqlStatement` = 'public void setSqlStatement(String sqlStatement)'
SET NamedParameterSQLActivity.`setSqlArguments` = 'public void setSqlArguments(ParameterContext[] sqlArguments)'
SET NamedParameterSQLActivity.`setResultSet` = 'public void setResultSet(ParameterContext[] resultSet)'
SET NamedParameterSQLActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET NamedParameterSQLActivity.`getActivityDetails` = 'public Map getActivityDetails(ProcessInstance inst, String locale)'
SET NamedParameterSQLActivity.`validate` = 'public ValidationContext validate(Map options)'
SET EndActivity.`isEscalate` = 'public boolean isEscalate()'
SET EndActivity.`setEscalate` = 'public void setEscalate(boolean escalate)'
SET EndActivity.`getEscalationLevel` = 'public int getEscalationLevel()'
SET EndActivity.`setEscalationLevel` = 'public void setEscalationLevel(int escalationLevel)'
SET EndActivity.`isTerminateRunAndForgetSubProcess` = 'public boolean isTerminateRunAndForgetSubProcess()'
SET EndActivity.`setTerminateRunAndForgetSubProcess` = 'public void setTerminateRunAndForgetSubProcess(boolean terminateRunAndForgetSubProcess)'
SET EndActivity.`getTerminateStatus` = 'public String getTerminateStatus()'
SET EndActivity.`setTerminateStatus` = 'public void setTerminateStatus(String terminateStatus)'
SET EndActivity.`getStatus` = 'public int getStatus()'
SET EndActivity.`setStatus` = 'public void setStatus(int status)'
SET EndActivity.`executeActivity` = 'public void executeActivity(ProcessInstance instance)'
SET EndActivity.`validate` = 'public ValidationContext validate(Map options)'
SET LocalNateOnMessengerActivity.`validate` = 'public String validate(Object arg0, Instance arg1)'
SET LocalNateOnMessengerActivity.`getContents` = 'public String getContents()'
SET LocalNateOnMessengerActivity.`setContents` = 'public void setContents(String value)'
SET LocalNateOnMessengerActivity.`getToRole` = 'public Role getToRole()'
SET LocalNateOnMessengerActivity.`setToRole` = 'public void setToRole(Role value)'
SET LocalNateOnMessengerActivity.`executeActivity` = 'public void executeActivity(ProcessInstance instance)'
SET LocalNateOnMessengerActivity.`run` = 'public void run()'
SET LocalEMailActivity.`getContents` = 'public String getContents()'
SET LocalEMailActivity.`setContents` = 'public void setContents(String value)'
SET LocalEMailActivity.`getTitle` = 'public String getTitle()'
SET LocalEMailActivity.`setTitle` = 'public void setTitle(String value)'
SET LocalEMailActivity.`getTo` = 'public String getTo()'
SET LocalEMailActivity.`setTo` = 'public void setTo(String to)'
SET LocalEMailActivity.`getToRole` = 'public Role getToRole()'
SET LocalEMailActivity.`setToRole` = 'public void setToRole(Role value)'
SET LocalEMailActivity.`getFrom` = 'public String getFrom()'
SET LocalEMailActivity.`setFrom` = 'public void setFrom(String string)'
SET LocalEMailActivity.`getFromRole` = 'public Role getFromRole()'
SET LocalEMailActivity.`setFromRole` = 'public void setFromRole(Role fromRole)'
SET LocalEMailActivity.`getCharacterSet` = 'public String getCharacterSet()'
SET LocalEMailActivity.`setCharacterSet` = 'public void setCharacterSet(String characterSet)'
SET LocalEMailActivity.`isAppendTrackingLink` = 'public boolean isAppendTrackingLink()'
SET LocalEMailActivity.`setAppendTrackingLink` = 'public void setAppendTrackingLink(boolean isAppendTrackingLink)'
SET LocalEMailActivity.`setAttachFiles` = 'public void setAttachFiles(ProcessVariable[] attachFiles)'
SET LocalEMailActivity.`executeActivity` = 'public void executeActivity(ProcessInstance instance)'
SET ApprovalSubActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET BackActivity.`executeActivity` = 'public void executeActivity(ProcessInstance instance)'
SET BackActivity.`logic` = 'public void logic(Activity activity)'
SET BackActivity.`getTargetActivity` = 'public ActivitySelectionContext getTargetActivity()'
SET BackActivity.`setTargetActivity` = 'public void setTargetActivity(ActivitySelectionContext targetActivity)'
SET BackActivity.`getTargetActivityPV` = 'public ProcessVariable getTargetActivityPV()'
SET BackActivity.`setTargetActivityPV` = 'public void setTargetActivityPV(ProcessVariable targetActivityPV)'
SET BackActivity.`getFlag` = 'public String getFlag()'
SET BackActivity.`setFlag` = 'public void setFlag(String flag)'
SET BackActivity.`getTargetSource` = 'public int getTargetSource()'
SET BackActivity.`setTargetSource` = 'public void setTargetSource(int targetSource)'
SET FileGenerationActivity.`getFileName` = 'public String getFileName()'
SET FileGenerationActivity.`setFileName` = 'public void setFileName(String fileName)'
SET FileGenerationActivity.`getContents` = 'public String getContents()'
SET FileGenerationActivity.`setContents` = 'public void setContents(String contents)'
SET FileGenerationActivity.`getFileReceiver` = 'public Role getFileReceiver()'
SET FileGenerationActivity.`setFileReceiver` = 'public void setFileReceiver(Role fileReceiver)'
SET FileGenerationActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET FileGenerationActivity.`validate` = 'public ValidationContext validate(Map options)'
SET BreakActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET LocalSMSActivity.`validate` = 'public String validate(Object arg0, Instance arg1)'
SET LocalSMSActivity.`getContents` = 'public String getContents()'
SET LocalSMSActivity.`setContents` = 'public void setContents(String value)'
SET LocalSMSActivity.`getToRole` = 'public Role getToRole()'
SET LocalSMSActivity.`setToRole` = 'public void setToRole(Role value)'
SET LocalSMSActivity.`executeActivity` = 'public void executeActivity(ProcessInstance instance)'
SET ScriptActivity.`getScript` = 'public String getScript()'
SET ScriptActivity.`setScript` = 'public void setScript(String string)'
SET ScriptActivity.`getOut` = 'public ProcessVariable getOut()'
SET ScriptActivity.`setOut` = 'public void setOut(ProcessVariable variable)'
SET ScriptActivity.`getLanguage` = 'public int getLanguage()'
SET ScriptActivity.`setLanguage` = 'public void setLanguage(int language)'
SET ScriptActivity.`scriptEngine` = 'public Object scriptEngine(String scriptSmt)'
SET ScriptActivity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET ScriptActivity.`validate` = 'public ValidationContext validate(Map options)'
SET Activity.`getParentActivity` = 'public Activity getParentActivity()'
SET Activity.`setParentActivity` = 'protected void setParentActivity(Activity parentAct)'
SET Activity.`clearParentActivity` = 'public void clearParentActivity()'
SET Activity.`getName` = 'public TextContext getName()'
SET Activity.`setName` = 'public void setName(TextContext name)'
SET Activity.`setName` = 'public void setName(String name)'
SET Activity.`getDescription` = 'public TextContext getDescription()'
SET Activity.`setDescription` = 'public void setDescription(TextContext string)'
SET Activity.`getTracingTag` = 'public String getTracingTag()'
SET Activity.`setTracingTag` = 'public void setTracingTag(String tag)'
SET Activity.`getIconURL` = 'public String getIconURL()'
SET Activity.`setIconURL` = 'public void setIconURL(String iconURL)'
SET Activity.`getCost` = 'public int getCost()'
SET Activity.`setCost` = 'public void setCost(int i)'
SET Activity.`getExtendedAttributes` = 'public Hashtable getExtendedAttributes()'
SET Activity.`setExtendedAttributes` = 'public void setExtendedAttributes(Hashtable value)'
SET Activity.`setExtendedAttribute` = 'public void setExtendedAttribute(String k, Object value)'
SET Activity.`getRetryLimit` = 'public int getRetryLimit()'
SET Activity.`setRetryLimit` = 'public void setRetryLimit(int i)'
SET Activity.`getRetryDelay` = 'public int getRetryDelay()'
SET Activity.`setRetryDelay` = 'public void setRetryDelay(int l)'
SET Activity.`isHidden` = 'public boolean isHidden()'
SET Activity.`setHidden` = 'public void setHidden(boolean b)'
SET Activity.`getDesigner` = 'public ActivityDesigner getDesigner()'
SET Activity.`addProperyChangeListener` = 'public void addProperyChangeListener(PropertyChangeListener pcl)'
SET Activity.`removeProperyChangeListener` = 'public void removeProperyChangeListener(PropertyChangeListener pcl)'
SET Activity.`clearProperyChangeListeners` = 'public void clearProperyChangeListeners()'
SET Activity.`firePropertyChangeEvent` = 'public void firePropertyChangeEvent(PropertyChangeEvent pce)'
SET Activity.`isDynamicChangeAllowed` = 'public boolean isDynamicChangeAllowed()'
SET Activity.`setDynamicChangeAllowed` = 'public void setDynamicChangeAllowed(boolean b)'
SET Activity.`isQueuingEnabled` = 'public boolean isQueuingEnabled()'
SET Activity.`setQueuingEnabled` = 'public void setQueuingEnabled(boolean b)'
SET Activity.`getActivityIcon` = 'public String getActivityIcon()'
SET Activity.`setActivityIcon` = 'public void setActivityIcon(String activityIconURL)'
SET Activity.`getStatusCode` = 'public String getStatusCode()'
SET Activity.`setStatusCode` = 'public void setStatusCode(String statusCode)'
SET Activity.`isFaultTolerant` = 'public boolean isFaultTolerant()'
SET Activity.`setFaultTolerant` = 'public void setFaultTolerant(boolean isErrorTolerant)'
SET Activity.`getStartedTime` = 'public Calendar getStartedTime(ProcessInstance instance)'
SET Activity.`setStartedTime` = 'public void setStartedTime(ProcessInstance instance, Calendar theTime)'
SET Activity.`getBusinessStatus` = 'public String getBusinessStatus(ProcessInstance instance)'
SET Activity.`setBusinessStatus` = 'public void setBusinessStatus(ProcessInstance instance, String value)'
SET Activity.`getEndTime` = 'public Calendar getEndTime(ProcessInstance instance)'
SET Activity.`setEndTime` = 'public void setEndTime(ProcessInstance instance, Calendar theTime)'
SET Activity.`createInstance` = 'public ProcessInstance createInstance(ProcessInstance instanceInCreating)'
SET Activity.`createInstance` = 'public ProcessInstance createInstance(String instanceId, Map options)'
SET Activity.`createInstance` = 'public ProcessInstance createInstance()'
SET Activity.`getRootActivity` = 'public Activity getRootActivity()'
SET Activity.`getProcessDefinition` = 'public ProcessDefinition getProcessDefinition()'
SET Activity.`beforeExecute` = 'protected void beforeExecute(ProcessInstance instance)'
SET Activity.`afterComplete` = 'protected void afterComplete(ProcessInstance instance)'
SET Activity.`afterExecute` = 'protected void afterExecute(ProcessInstance instance)'
SET Activity.`executeActivity` = 'protected void executeActivity(ProcessInstance instance)'
SET Activity.`onEvent` = 'protected void onEvent(String command, ProcessInstance instance, Object payload)'
SET Activity.`onChanged` = 'protected void onChanged(ProcessInstance instance)'
SET Activity.`fireEvent` = 'public void fireEvent(String event, ProcessInstance instance, Object payload)'
SET Activity.`fireComplete` = 'public void fireComplete(ProcessInstance instance)'
SET Activity.`fireSkipped` = 'public void fireSkipped(ProcessInstance instance)'
SET Activity.`fireCompensate` = 'public void fireCompensate(ProcessInstance instance)'
SET Activity.`fireFault` = 'public void fireFault(ProcessInstance instance, FaultContext faultContext)'
SET Activity.`fireFault` = 'public void fireFault(ProcessInstance instance, Exception e)'
SET Activity.`fireResume` = 'public void fireResume(ProcessInstance instance)'
SET Activity.`fireChanged` = 'public void fireChanged(ProcessInstance instance)'
SET Activity.`stop` = 'public void stop(ProcessInstance instance)'
SET Activity.`stop` = 'public void stop(ProcessInstance instance,String status)'
SET Activity.`suspend` = 'public void suspend(ProcessInstance instance)'
SET Activity.`resume` = 'public void resume(ProcessInstance instance)'
SET Activity.`reset` = 'public void reset(ProcessInstance instance)'
SET Activity.`skip` = 'public void skip(ProcessInstance instance)'
SET Activity.`compensate` = 'public void compensate(ProcessInstance instance)'
SET Activity.`compensateOneStep` = 'public void compensateOneStep(ProcessInstance instance)'
SET Activity.`change` = 'public void change(ProcessInstance instance)'
SET Activity.`createDesigner` = 'public ActivityDesigner createDesigner()'
SET Activity.`getActivityDetails` = 'public Map getActivityDetails(ProcessInstance inst, String locale)'
SET Activity.`validate` = 'public ValidationContext validate(Map options)'
SET Activity.`usabilityCheck` = 'public void usabilityCheck(Map checkingValues)'
SET Activity.`getActivityLabel` = 'protected String getActivityLabel()'
SET Activity.`getStatus` = 'public String getStatus(ProcessInstance instance)'
SET Activity.`setStatus` = 'public void setStatus(ProcessInstance instance, String status)'
SET Activity.`getRetryCount` = 'public int getRetryCount(ProcessInstance instance)'
SET Activity.`setRetryCount` = 'public void setRetryCount(ProcessInstance instance, int retryCnt)'
SET Activity.`getElapsedTime` = 'public String getElapsedTime(ProcessInstance instance)'
SET Activity.`getElapsedTimeAsLong` = 'public long getElapsedTimeAsLong(ProcessInstance instance)'
SET Activity.`findParentActivity` = 'public Activity findParentActivity(Class type)'
SET Activity.`clone` = 'public Object clone()'
SET Activity.`getPreviousActivities` = 'public Vector getPreviousActivities()'
SET Activity.`evaluateContent` = 'public StringBuffer evaluateContent(ProcessInstance instance, String expression, ValidationContext validationContext)'
SET Activity.`evaluateContent` = 'public StringBuffer evaluateContent(ProcessInstance instance, String expression)'
SET Activity.`gatherPropagatedActivities` = 'protected void gatherPropagatedActivities(ProcessInstance instance, List list)'
SET Activity.`getPropagatedActivities` = 'public List getPropagatedActivities(ProcessInstance instance)'
SET Activity.`compensateToThis` = 'public List compensateToThis(ProcessInstance instance)'
SET Activity.`compensateToThis` = 'public List compensateToThis(ProcessInstance instance, boolean compensateAndResume)'
SET Activity.`firePropertyChangeEventToActivityFilters` = 'protected void firePropertyChangeEventToActivityFilters(ProcessInstance instance, String propertyName, Object changedValue)'
SET Activity.`fireEventToActivityFilters` = 'protected void fireEventToActivityFilters(ProcessInstance instance, String eventName, Object payload)'
SET Activity.`getTriggeringMethodFromEventName` = 'private int getTriggeringMethodFromEventName(String eventName)'
SET Activity.`registerToProcessDefinition` = 'public boolean registerToProcessDefinition(boolean autoTagging, boolean checkCollision)'
SET Activity.`toString` = 'public String toString()'
SET Activity.`equals` = 'public boolean equals(Object obj)'
SET Activity.`isSuccessorOf` = 'public boolean isSuccessorOf(Activity complexActivity)'
SET Activity.`isAncestorOf` = 'public boolean isAncestorOf(Activity activity)'
SET Activity.`toGraph` = 'public GraphActivity toGraph(Hashtable graph2BlockMap)'
SET Activity.`createTransferrable` = 'public Transferable createTransferrable()'
SET Activity.`isDataFlavorSupported` = 'public boolean isDataFlavorSupported(DataFlavor flavor)'
SET Activity.`getTransferData` = 'public Object getTransferData(DataFlavor flavor)'
SET Activity.`executeTest` = 'public void executeTest(ProcessInstance instance, ProcessInstance testInstance)'


I want to utilize following techniques:

- clean architecture
- spring-boot3
- spring-data-rest
- JPA (must use package jakarta.persistence.* instead of javax.persistence.*)
- H2 DB
- Lombok
- Kafka with spring-cloud-streams library 
- JUnit Test


SELF-CRITICISM: 
 - when you create pom.xml, USE correct parent project to spring boot 3
 - when you create pom.xml, you MUST specify the version: 3.1.3 ONLY for the spring-cloud-streams
 - Please generate start from pom.xml


when you create execution shell (run.sh), please add '--no-transfer-progress' option not to output transfer progress if there's mvn command:

```
mvn [command] --no-transfer-progress
```

