Let's start by creating the `pom.xml` file which will define the Maven project, its dependencies, and properties.

pom.xml
```xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>user-order-management</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.3</version>
    </parent>

    <properties>
        <java.version>17</java.version>
        <spring-cloud.version>2021.0.3</spring-cloud.version>
    </properties>

    <dependencies>
        <!-- Spring Boot Starter Web, includes REST Controllers support -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Starter Data JPA, includes spring-data-rest -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- H2 Database Engine -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Lombok for boilerplate code reduction -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Spring Cloud Stream with Kafka Binder -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream</artifactId>
            <version>3.1.3</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream-binder-kafka</artifactId>
        </dependency>

        <!-- Jakarta Persistence API -->
        <dependency>
            <groupId>jakarta.persistence</groupId>
            <artifactId>jakarta.persistence-api</artifactId>
        </dependency>

        <!-- JUnit for testing -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
```

Next, we will create the `run.sh` script to build and run the application.

run.sh
```sh
#!/bin/bash
mvn clean install --no-transfer-progress
mvn spring-boot:run --no-transfer-progress
```

Make sure to give execution permission to the `run.sh` script:
```sh
chmod +x run.sh
```

Now, let's start implementing the core classes, functions, and methods as per the Event Storming Model provided. We will follow the Clean Architecture approach, which typically involves organizing the code into layers with clear responsibilities:

- Entities (Domain Layer)
- Use Cases (Application Layer)
- Interface Adapters (Infrastructure Layer)
- Frameworks and Drivers (Infrastructure Layer)

We will start with the domain layer by defining the entities and value objects.

src/main/java/com/example/userordermanagement/domain/Address.java
```java
package com.example.userordermanagement.domain;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Address {
    private String street;
    private String city;
    private String state;
    private String zipCode;
    private String country;
}
```

src/main/java/com/example/userordermanagement/domain/Money.java
```java
package com.example.userordermanagement.domain;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Money {
    private BigDecimal amount;
    private String currency;
}
```

src/main/java/com/example/userordermanagement/domain/Order.java
```java
package com.example.userordermanagement.domain;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.GenericGenerator;

import java.util.UUID;

@Entity
@Table(name = "orders")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Order {
    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")
    private UUID orderId;

    private String foodSelection;
    private Integer quantity;
    private String specialRequest;

    @Embedded
    private Address deliveryAddress;

    private String paymentMethod;
    private String paymentMethodType;

    @Embedded
    private Money orderAmount;

    private String orderStatus;
    private String estimatedDeliveryTime;
}
```

Next, we will define the repository interface for the `Order` entity.

src/main/java/com/example/userordermanagement/repository/OrderRepository.java
```java
package com.example.userordermanagement.repository;

import com.example.userordermanagement.domain.Order;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.UUID;

@Repository
public interface OrderRepository extends JpaRepository<Order, UUID> {
}
```

Now, let's define the application services that will handle the commands and publish events.

src/main/java/com/example/userordermanagement/service/OrderService.java
```java
package com.example.userordermanagement.service;

import com.example.userordermanagement.domain.Order;
import com.example.userordermanagement.repository.OrderRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.UUID;

@Service
public class OrderService {
    private final OrderRepository orderRepository;

    @Autowired
    public OrderService(OrderRepository orderRepository) {
        this.orderRepository = orderRepository;
    }

    public Order placeOrder(Order order) {
        // Logic to place an order
        // Publish OrderPlaced event
        return orderRepository.save(order);
    }

    public void cancelOrder(UUID orderId) {
        // Logic to cancel an order
        // Publish OrderCancelled event
        orderRepository.deleteById(orderId);
    }

    public List<Order> checkPreviousOrders() {
        // Logic to retrieve previous orders
        // Publish PreviousOrdersChecked event
        return orderRepository.findAll();
    }

    public void confirmOrder(UUID orderId) {
        // Logic to confirm an order
        // No event is published for this action in the model
        Order order = orderRepository.findById(orderId).orElseThrow();
        order.setOrderStatus("Confirmed");
        orderRepository.save(order);
    }
}
```

Next, we will define the REST controllers that will expose the endpoints to interact with the application.

src/main/java/com/example/userordermanagement/controller/OrderController.java
```java
package com.example.userordermanagement.controller;

import com.example.userordermanagement.domain.Order;
import com.example.userordermanagement.service.OrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/orders")
public class OrderController {
    private final OrderService orderService;

    @Autowired
    public OrderController(OrderService orderService) {
        this.orderService = orderService;
    }

    @PostMapping
    public ResponseEntity<Order> placeOrder(@RequestBody Order order) {
        Order placedOrder = orderService.placeOrder(order);
        return ResponseEntity.ok(placedOrder);
    }

    @DeleteMapping("/{orderId}")
    public ResponseEntity<Void> cancelOrder(@PathVariable UUID orderId) {
        orderService.cancelOrder(orderId);
        return ResponseEntity.ok().build();
    }

    @GetMapping
    public ResponseEntity<List<Order>> checkPreviousOrders() {
        List<Order> orders = orderService.checkPreviousOrders();
        return ResponseEntity.ok(orders);
    }

    @PostMapping("/{orderId}/confirm")
    public ResponseEntity<Void> confirmOrder(@PathVariable UUID orderId) {
        orderService.confirmOrder(orderId);
        return ResponseEntity.ok().build();
    }
}
```

We will also need to configure the Kafka binder for Spring Cloud Stream.

src/main/java/com/example/userordermanagement/config/KafkaConfig.java
```java
package com.example.userordermanagement.config;

import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.messaging.Source;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableBinding(Source.class)
public class KafkaConfig {
    // Configuration for Kafka binder will be picked up from application.properties
}
```

Next, we will create the `application.properties` file to configure the application, including the H2 database and Kafka connection details.

src/main/resources/application.properties
```properties
spring.datasource.url=jdbc:h2:mem:userorderdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update

spring.kafka.bootstrap-servers=localhost:9092
spring.cloud.stream.kafka.binder.brokers=localhost:9092
spring.cloud.stream.bindings.output.destination=order-events
```

Finally, we will create the main application class to bootstrap the Spring Boot application.

src/main/java/com/example/userordermanagement/UserOrderManagementApplication.java
```java
package com.example.userordermanagement;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class UserOrderManagementApplication {
    public static void main(String[] args) {
        SpringApplication.run(UserOrderManagementApplication.class, args);
    }
}
```

To complete the implementation, we will add a simple JUnit test for the `OrderService`.

src/test/java/com/example/userordermanagement/service/OrderServiceTest.java
```java
package com.example.userordermanagement.service;

import com.example.userordermanagement.domain.Order;
import com.example.userordermanagement.repository.OrderRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.Collections;
import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@SpringBootTest
public class OrderServiceTest {
    @Mock
    private OrderRepository orderRepository;

    @InjectMocks
    private OrderService orderService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testPlaceOrder() {
        Order order = new Order();
        when(orderRepository.save(any(Order.class))).thenReturn(order);

        Order placedOrder = orderService.placeOrder(order);

        assertEquals(order, placedOrder);
        verify(orderRepository, times(1)).save(order);
    }

    @Test
    public void testCheckPreviousOrders() {
        List<Order> orders = Collections.singletonList(new Order());
        when(orderRepository.findAll()).thenReturn(orders);

        List<Order> foundOrders = orderService.checkPreviousOrders();

        assertEquals(orders, foundOrders);
        verify(orderRepository, times(1)).findAll();
    }
}
```

This concludes a fully working implementation.