To implement the domain model with the specified techniques, we will need to create a multi-module Maven project with Spring Boot 3, Spring Data REST, JPA, Lombok, Kafka with spring-cloud-streams, and H2 database. We will also include JUnit for testing.

Let's start by defining the Maven project structure and the `pom.xml` files for the parent and child modules.

pom.xml (Parent)
```xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.uengine</groupId>
    <artifactId>uengine-process</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <modules>
        <module>core</module>
        <module>web</module>
    </modules>

    <properties>
        <java.version>17</java.version>
        <spring-boot.version>3.0.0</spring-boot.version>
        <spring-cloud.version>2021.0.3</spring-cloud.version>
        <spring-cloud-stream.version>3.1.3</spring-cloud-stream.version>
        <lombok.version>1.18.24</lombok.version>
        <h2.version>2.1.214</h2.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
```

core/pom.xml (Core Module)
```xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>org.uengine</groupId>
        <artifactId>uengine-process</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>core</artifactId>

    <dependencies>
        <!-- Spring Data JPA -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <!-- H2 Database -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>${h2.version}</version>
            <scope>runtime</scope>
        </dependency>
        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>
        <!-- JUnit -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
```

web/pom.xml (Web Module)
```xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>org.uengine</groupId>
        <artifactId>uengine-process</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>web</artifactId>

    <dependencies>
        <!-- Spring Boot Web Starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- Spring Data REST -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-rest</artifactId>
        </dependency>
        <!-- Spring Cloud Stream -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream</artifactId>
            <version>${spring-cloud-stream.version}</version>
        </dependency>
        <!-- Kafka Binder -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream-binder-kafka</artifactId>
        </dependency>
        <!-- Core Module -->
        <dependency>
            <groupId>org.uengine</groupId>
            <artifactId>core</artifactId>
            <version>${project.version}</version>
        </dependency>
    </dependencies>
</project>
```

Next, we will create the application properties and the main application class for the Spring Boot application.

web/src/main/resources/application.properties
```properties
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true

spring.kafka.bootstrap-servers=localhost:9092
spring.cloud.stream.kafka.binder.brokers=localhost:9092
spring.cloud.stream.bindings.process-in.destination=process-topic
spring.cloud.stream.bindings.process-out.destination=process-topic

# Enable JPA repositories
spring.data.rest.base-path=/api
```

web/src/main/java/org/uengine/process/Application.java
```java
package org.uengine.process;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
```

Now, let's create the domain entities, repositories, and services for the application.

core/src/main/java/org/uengine/process/domain/Activity.java
```java
package org.uengine.process.domain;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

@Entity
@Getter
@Setter
public class Activity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String description;
    private String tracingTag;
    private String iconURL;
    private int cost;
    private boolean hidden;
    private boolean dynamicChangeAllowed;
    private boolean queuingEnabled;
    private String activityIcon;
    private String statusCode;
    private boolean faultTolerant;
    // Other fields and relationships
}
```

We will continue to create entities for all classes in the domain model, following the same pattern as above. Each entity will have its corresponding repository interface extending `JpaRepository`.

core/src/main/java/org/uengine/process/repository/ActivityRepository.java
```java
package org.uengine.process.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.uengine.process.domain.Activity;

public interface ActivityRepository extends JpaRepository<Activity, Long> {
}
```

We will also create service classes to encapsulate business logic and interact with the repositories.

core/src/main/java/org/uengine/process/service/ActivityService.java
```java
package org.uengine.process.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.uengine.process.domain.Activity;
import org.uengine.process.repository.ActivityRepository;

@Service
public class ActivityService {
    private final ActivityRepository activityRepository;

    @Autowired
    public ActivityService(ActivityRepository activityRepository) {
        this.activityRepository = activityRepository;
    }

    // Business logic methods
}
```

Next, we will create the REST controllers to expose the domain entities via HTTP endpoints using Spring Data REST.

web/src/main/java/org/uengine/process/web/ActivityController.java
```java
package org.uengine.process.web;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.uengine.process.service.ActivityService;

@RestController
@RequestMapping("/api/activities")
public class ActivityController {
    private final ActivityService activityService;

    @Autowired
    public ActivityController(ActivityService activityService) {
        this.activityService = activityService;
    }

    // RESTful endpoints
}
```

We will also configure Kafka with spring-cloud-streams to produce and consume messages.

web/src/main/java/org/uengine/process/messaging/ProcessMessageHandler.java
```java
package org.uengine.process.messaging;

import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.cloud.stream.messaging.Processor;
import org.springframework.messaging.handler.annotation.SendTo;

@EnableBinding(Processor.class)
public class ProcessMessageHandler {

    @StreamListener(Processor.INPUT)
    @SendTo(Processor.OUTPUT)
    public String handleMessage(String message) {
        // Process the message and return a response
        return "Processed: " + message;
    }
}
```

Finally, we will create JUnit tests for our services and controllers.

core/src/test/java/org/uengine/process/service/ActivityServiceTest.java
```java
package org.uengine.process.service;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.uengine.process.domain.Activity;
import org.uengine.process.repository.ActivityRepository;

import static org.junit.jupiter.api.Assertions.assertNotNull;

@SpringBootTest
public class ActivityServiceTest {

    @Autowired
    private ActivityService activityService;

    @Autowired
    private ActivityRepository activityRepository;

    @Test
    public void testActivityCreation() {
        Activity activity = new Activity();
        activity.setName("Test Activity");
        activity = activityRepository.save(activity);

        assertNotNull(activity.getId());
    }
}
```

web/src/test/java/org/uengine/process/web/ActivityControllerTest.java
```java
package org.uengine.process.web;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(ActivityController.class)
public class ActivityControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Test
    public void testGetActivities() throws Exception {
        mockMvc.perform(get("/api/activities"))
                .andExpect(status().isOk());
    }
}
```

Lastly, we will create a shell script to run the application.

run.sh
```sh
#!/bin/bash
mvn spring-boot:run --no-transfer-progress
```

Make sure to give execution permission to the `run.sh` script:

```sh
chmod +x run.sh
```

This concludes a fully working implementation.